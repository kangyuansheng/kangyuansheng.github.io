<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Cloud系列:1.微服务介绍</title>
      <link href="/2019/03/28/spring-cloud/spring-cloud-xi-lie-1.wei-fu-wu-jie-shao/"/>
      <url>/2019/03/28/spring-cloud/spring-cloud-xi-lie-1.wei-fu-wu-jie-shao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是微服务："><a href="#1-什么是微服务：" class="headerlink" title="1.什么是微服务："></a>1.什么是微服务：</h3><p>1）一组小的服务（大小没有特别的标准，只要同一团队的工程师理解服务的标识一致即可）</p><p>2）独立的进程（java的tomcat，nodejs等）</p><p>3）轻量级的通信（不是soap，是http协议）</p><p>4）基于业务能力（类似用户服务，商品服务等等）</p><p>5）独立部署（迭代速度快）</p><p>6）无集中式管理（无须统一技术栈，可以根据不同的服务或者团队进行灵活选择）</p><h3 id="2-为什么要用微服务："><a href="#2-为什么要用微服务：" class="headerlink" title="2.为什么要用微服务："></a>2.为什么要用微服务：</h3><p>单体在开发的过程中，会随着项目的开发导致维护，开发，运营等成本急剧增高。</p><h3 id="3-微服务的优缺点："><a href="#3-微服务的优缺点：" class="headerlink" title="3.微服务的优缺点："></a>3.微服务的优缺点：</h3><h4 id="3-1-优点"><a href="#3-1-优点" class="headerlink" title="3.1 优点"></a>3.1 优点</h4><ul><li><p>易于开发与维护</p></li><li><ul><li>微服务相对小，易于理解</li><li>启动时间短，开发效率高</li></ul></li><li><p>独立部署</p></li><li><ul><li>一个微服务的修改不需要协调其它服务</li></ul></li><li><p>伸缩性强</p></li><li><ul><li>每个服务都可以在横向和纵向上扩展</li><li>每个服务都可按硬件资源的需求进行独立扩容</li></ul></li><li><p>与组织结构相匹配</p></li><li><ul><li>微服务架构可以更好将架构和组织相匹配</li><li>每个团队独立负责某些服务，获得更高的生产力</li></ul></li><li><p>技术异构性</p></li><li><ul><li>使用最适合该服务的技术</li><li>降低尝试新技术的成本</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之使用篇:6.使用 Spring Boot上传文件</title>
      <link href="/2019/03/25/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-6.shi-yong-spring-boot-shang-chuan-wen-jian/"/>
      <url>/2019/03/25/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-6.shi-yong-spring-boot-shang-chuan-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="文件上传示例"><a href="#文件上传示例" class="headerlink" title="文件上传示例"></a>文件上传示例</h3><p>Spring Boot文件上传，不需要什么特别的配置。在Controller中，将上传的文件映射到<code>MultipartFile</code>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UploadController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"upload"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"上传失败，请选择文件"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String filePath <span class="token operator">=</span> <span class="token string">"/Users/itinypocket/workspace/temp/"</span><span class="token punctuation">;</span>        File dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"上传成功"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"上传失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/multiUpload"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> String <span class="token function">multiUpload</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>MultipartFile<span class="token operator">></span> files <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MultipartHttpServletRequest<span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String filePath <span class="token operator">=</span> <span class="token string">"/Users/itinypocket/workspace/temp/"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MultipartFile file <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"上传第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个文件失败"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个文件上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"上传第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个文件失败"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"上传成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="超过最大上传大小"><a href="#超过最大上传大小" class="headerlink" title="超过最大上传大小"></a>超过最大上传大小</h3><p>要处理最大上传大小超出异常，请声明一个<code>@ControllerAdvice</code>并捕获<code>MultipartException</code>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//http://jira.spring.io/browse/SPR-14651</span>    <span class="token comment" spellcheck="true">//4.3.5 supports RedirectAttributes redirectAttributes</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MultipartException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">handleError1</span><span class="token punctuation">(</span>MultipartException e<span class="token punctuation">,</span> RedirectAttributes redirectAttributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redirectAttributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/uploadStatus"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Multipart文件大小"><a href="#Multipart文件大小" class="headerlink" title="Multipart文件大小"></a>Multipart文件大小</h3><p>默认情况下，Spring Boot max文件上传大小为<code>1MB</code>，可以通过以下应用程序属性来配置它的值，<em>application.properties</em></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#search multipart</span><span class="token attr-name">spring.http.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token attr-value">10MB</span><span class="token attr-name">spring.http.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token attr-value">10MB</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之使用篇:9.WebMvcConfigurer详解</title>
      <link href="/2019/03/24/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-9.webmvcconfigurer-xiang-jie/"/>
      <url>/2019/03/24/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-9.webmvcconfigurer-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-WebMvcConfigurer-介绍"><a href="#1-WebMvcConfigurer-介绍" class="headerlink" title="1.WebMvcConfigurer 介绍"></a>1.WebMvcConfigurer 介绍</h3><p>被用来定制 Spring Boot 全局 MVC 属性，通常我们需要定义一个实现了 <code>WebMvcConfigurer</code> 接口配置类，然后在此类中配置相关 MVC 属性。</p><p><strong>以下WebMvcConfigurerAdapter 比较常用的重写接口</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 解决跨域问题 **/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 添加拦截器 **/</span><span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 这里配置视图解析器 **/</span><span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span>ViewResolverRegistry registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 配置内容裁决的一些选项 **/</span><span class="token keyword">void</span> <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span>ContentNegotiationConfigurer configurer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 视图跳转控制器 **/</span><span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 静态资源处理 **/</span><span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 默认静态资源处理器 **/</span><span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span>DefaultServletHandlerConfigurer configurer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-跨域支持"><a href="#2-跨域支持" class="headerlink" title="2.跨域支持"></a>2.跨域支持</h3><p>Spring Boot 提供了对 CORS 的支持，您可以实现 <code>addCorsMappings</code> 接口来添加规则来允许跨域访问：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 允许所有跨域访问</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更为精细的控制</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-1-同源策略"><a href="#2-1-同源策略" class="headerlink" title="2.1 同源策略"></a>2.1 同源策略</h4><p>同源策略是浏览器上为安全性考虑实施的非常重要的安全策略。</p><p>同源：URL由协议、域名、端口和路径组成，如果两个URL的协议、域名和端口相同，则表示他们同源。</p><p>同源策略：浏览器的同源策略，限制了来自不同源的”document”或脚本，对当前”document”读取或设置某些属性。从一个域上加载的脚本不允许访问另外一个域的文档属性。</p><h3 id="3-配置日期格式化"><a href="#3-配置日期格式化" class="headerlink" title="3.配置日期格式化"></a>3.配置日期格式化</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 配置日期格式化* @param registry*/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span>FormatterRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    registry<span class="token punctuation">.</span><span class="token function">addFormatter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-配置-Jackson"><a href="#4-配置-Jackson" class="headerlink" title="4.配置 Jackson"></a>4.配置 Jackson</h3><p><strong>Jackson 是 Spring Boot 内置的 Json 解析框架，用来完成出入参的序列化和反序列化</strong>。</p><p>通常，我们会在 Controller 类中方法上，加上 <code>@RequestBody</code> 或者 <code>@ResponseBody</code> 注解，Spring Boot 会自动对出入参做 Json 解析与转换工作。</p><p><strong><code>@RequestBody</code>用于将入参 Json 转换成对象，而 <code>@ResponseBody</code> 用于将对象转换成 Json 返回。</strong></p><p>定义一个 <code>JacksonConfig</code> 配置类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ObjectMapper <span class="token function">objectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义日期转换格式</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-配置拦截器"><a href="#5-配置拦截器" class="headerlink" title="5.配置拦截器"></a>5.配置拦截器</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 配置拦截器* @param interceptorRegistry*/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry interceptorRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拦截所有 /admin/** 的访问地址</span>    interceptorRegistry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span>              <span class="token class-name">LoginValidationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之使用篇:8.Spring AOP切面统一打印请求日志</title>
      <link href="/2019/03/24/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-8.spring-aop-qie-mian-tong-yi-da-yin-qing-qiu-ri-zhi/"/>
      <url>/2019/03/24/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-8.spring-aop-qie-mian-tong-yi-da-yin-qing-qiu-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Log4j2-介绍"><a href="#1-Log4j2-介绍" class="headerlink" title="1.Log4j2 介绍"></a>1.Log4j2 介绍</h3><p>Spring Boot 中默认使用 Logback 作为日志框架，接下来我们将学习如何在 Spring Boot 中集成与配置 Log4j2。在配置之前，我们需要知道的是 Log4j2 是 Log4j 的升级版，它在 Log4j 的基础上做了诸多改进：</p><ul><li>异步日志；</li><li>支持 Java8 lambda 风格的懒加载日志；</li><li>过滤器；</li><li>插件；</li><li>并发性改进；</li><li>支持： SLF4J, Commons Logging, Log4j-1.x 以及 java.util.logging;</li><li>配置热加载;</li><li>自定义日志级别；</li></ul><h3 id="2-配置Log4j2"><a href="#2-配置Log4j2" class="headerlink" title="2.配置Log4j2"></a>2.配置Log4j2</h3><h4 id="2-1-添加Maven依赖"><a href="#2-1-添加Maven依赖" class="headerlink" title="2.1 添加Maven依赖"></a>2.1 添加Maven依赖</h4><p>Spring Boot 默认使用的是 logback, 想要使用 Log4j2, 我们需要首先排除掉默认的日志框架，然后添加 log4j2 依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2-2-在application-properties添加配置"><a href="#2-2-在application-properties添加配置" class="headerlink" title="2.2 在application.properties添加配置"></a>2.2 在application.properties添加配置</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#Log4j2配置</span><span class="token attr-name">status</span> <span class="token punctuation">=</span> <span class="token attr-value">error</span><span class="token attr-name">name</span> <span class="token punctuation">=</span> <span class="token attr-value">Log4j2Sample</span><span class="token attr-name">appenders</span> <span class="token punctuation">=</span> <span class="token attr-value">console</span><span class="token attr-name">appender.console.type</span> <span class="token punctuation">=</span> <span class="token attr-value">Console</span><span class="token attr-name">appender.console.name</span> <span class="token punctuation">=</span> <span class="token attr-value">STDOUT</span><span class="token attr-name">appender.console.layout.type</span> <span class="token punctuation">=</span> <span class="token attr-value">PatternLayout</span><span class="token attr-name">appender.console.layout.pattern</span> <span class="token punctuation">=</span> <span class="token attr-value">%d{yyyy-MM-dd HH:mm:ss} - %msg%n</span><span class="token attr-name">rootLogger.level</span> <span class="token punctuation">=</span> <span class="token attr-value">warn</span><span class="token attr-name">rootLogger.appenderRefs</span> <span class="token punctuation">=</span> <span class="token attr-value">stdout</span><span class="token attr-name">rootLogger.appenderRef.stdout.ref</span> <span class="token punctuation">=</span> <span class="token attr-value">STDOUT</span></code></pre><h4 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationTests2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LogManager<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ApplicationTests2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug 级别日志 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info 级别日志 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn 级别日志 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error 级别日志 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"fatal 级别日志 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>控制台<span class="token operator">:</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">58.434</span>  INFO <span class="token number">7640</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>d<span class="token punctuation">.</span>t<span class="token punctuation">.</span>ApplicationTests2                <span class="token operator">:</span> info 级别日志 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">58.434</span>  WARN <span class="token number">7640</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>d<span class="token punctuation">.</span>t<span class="token punctuation">.</span>ApplicationTests2                <span class="token operator">:</span> warn 级别日志 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">58.434</span> ERROR <span class="token number">7640</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>d<span class="token punctuation">.</span>t<span class="token punctuation">.</span>ApplicationTests2                <span class="token operator">:</span> error 级别日志 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">58.434</span> FATAL <span class="token number">7640</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>d<span class="token punctuation">.</span>t<span class="token punctuation">.</span>ApplicationTests2                <span class="token operator">:</span> fatal 级别日志 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="3-配置-AOP-切面"><a href="#3-配置-AOP-切面" class="headerlink" title="3.配置 AOP 切面"></a>3.配置 AOP 切面</h3><h4 id="3-1添加-Maven-依赖"><a href="#3-1添加-Maven-依赖" class="headerlink" title="3.1添加 Maven 依赖"></a>3.1添加 Maven 依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入AOP模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="3-2-创建切面类"><a href="#3-2-创建切面类" class="headerlink" title="3.2 创建切面类"></a>3.2 创建切面类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Configuration注解声明 AOPConfig 类为一个配置类，将它交给 Spring 管理； * * @Aspect 声明这是一个切面类； */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AOPConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @Around 声明了一个表达式，描述的是需要织入的目标，     * @within 表示凡是类上带有注解类型为 org.springframework.web.bind.annotation.RestController 的，     * 一旦类中的方法被调用，都会执行 @Around 注解的方法，即是上面代码中 simpleAop() 方法。     *     * simpleAop() 表示需要织入的代码，参数为 ProceedingJoinPoint，     * 方法中 proceedingJoinPoint.getArgs() 表示获取目标方法的参数，转成 json 并打印到控制台。     *     * pjp.proceed() 表示调用目标方法，也就是我们需要做切面的业务逻辑方法，并返回目标方法的返回值。     *     * 注意：调用目标方法可能会抛出异常，我们这里不捕获，而是抛出给调用者。     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@within(org.springframework.web.bind.annotation.RestController)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">simpleAop</span><span class="token punctuation">(</span><span class="token keyword">final</span> ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"入参: "</span> <span class="token operator">+</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用目标方法</span>        Object object <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返参: "</span> <span class="token operator">+</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-AOP-切面统一打印请求日志"><a href="#4-AOP-切面统一打印请求日志" class="headerlink" title="4.AOP 切面统一打印请求日志"></a>4.AOP 切面统一打印请求日志</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Aspect：声明该类为一个注解类； */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLogAspect</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WebLogAspect<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @Pointcut：定义一个切点，后面跟随一个表达式，     * 表达式可以定义为某个 package 下的方法，也可以是自定义注解等；     *     * 以 controller 包下定义的所有请求为切入点     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.example.demo.controller..*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">webLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Before: 在切点之前，织入相关代码；     *     * @param joinPoint     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 开始打印请求日志</span>        ServletRequestAttributes attributes <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印请求相关参数</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"========================================== Start =========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印请求 url</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"URL            : {}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印 Http method</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"HTTP Method    : {}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印调用 controller 的全路径以及执行方法</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Class Method   : {}.{}"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印请求的 IP</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"IP             : {}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印请求入参</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Request Args   : {}"</span><span class="token punctuation">,</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @After: 在切点之后，织入相关代码;     *     * @throws Throwable     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=========================================== End ==========================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每个请求之间空一行</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Around: 在切入点前后织入代码，并且可以自由的控制何时执行切点；     *     * @param proceedingJoinPoint     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"webLog()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">doAround</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印出参</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Response Args  : {}"</span><span class="token punctuation">,</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行耗时</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Time-Consuming : {} ms"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @AfterReturning: 在切点返回内容后，织入相关代码，一般用于对返回值做些加工处理的场景；     *     * @AfterThrowing: 用来处理当织入的代码抛出异常后的逻辑处理;     */</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> log4j2 </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之使用篇:7.配置文件</title>
      <link href="/2019/03/24/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-7.pei-zhi-wen-jian/"/>
      <url>/2019/03/24/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-7.pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-application-properties介绍："><a href="#1-application-properties介绍：" class="headerlink" title="1.application.properties介绍："></a>1.application.properties介绍：</h3><p>Spring Boot使用“习惯优于配置”的理念让你的项目快速运行起来。application.properties是Spring Boot主要的全局配置文件。一般放在src/main/resources目录下。</p><h3 id="2-application-properties常用配置"><a href="#2-application-properties常用配置" class="headerlink" title="2.application.properties常用配置:"></a>2.application.properties常用配置:</h3><h4 id="2-1-数据库连接配置"><a href="#2-1-数据库连接配置" class="headerlink" title="2.1 数据库连接配置"></a>2.1 数据库连接配置</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#描述数据源</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/demo</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">0000</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span></code></pre><h4 id="2-2-配置端口和项目名访问"><a href="#2-2-配置端口和项目名访问" class="headerlink" title="2.2 配置端口和项目名访问"></a>2.2 配置端口和项目名访问</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定springboot内嵌容器启动的端口，默认使用tomcat容器时在8080端口    </span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span><span class="token comment" spellcheck="true">#配置项目访问路径</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/boot</span></code></pre><h4 id="2-3-日志配置"><a href="#2-3-日志配置" class="headerlink" title="2.3 日志配置"></a>2.3 日志配置</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 日志配置文件的位置。 例如对于Logback的`classpath：logback.xml`</span><span class="token attr-name">logging.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ％wEx#记录异常时使用的转换字。</span><span class="token attr-name">logging.exception-conversion-word</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志文件名。 例如`myapp.log`</span><span class="token attr-name">logging.file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志级别严重性映射。 例如`logging.level.org.springframework =  DEBUG`</span><span class="token attr-name">logging.level.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志文件的位置。 例如`/ var / log`</span><span class="token attr-name">logging.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于输出到控制台的Appender模式。 只支持默认的logback设置。</span><span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于输出到文件的Appender模式。 只支持默认的logback设置。</span><span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志级别的Appender模式（默认％5p）。 只支持默认的logback设置。</span><span class="token attr-name">logging.pattern.level</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true">#注册日志记录系统的初始化挂钩。</span><span class="token attr-name">logging.register-shutdown-hook</span><span class="token punctuation">=</span> <span class="token attr-value">false</span></code></pre><h4 id="2-4-AOP-切面"><a href="#2-4-AOP-切面" class="headerlink" title="2.4 AOP 切面"></a>2.4 AOP 切面</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 添加@EnableAspectJAutoProxy。</span><span class="token attr-name">spring.aop.auto</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 是否要创建基于子类（CGLIB）的代理（true），而不是基于标准的基于Java接口的代理（false）。</span><span class="token attr-name">spring.aop.proxy-target-class</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 应用程序上下文初始化器</span><span class="token comment" spellcheck="true"># 应用指标。</span><span class="token attr-name">spring.application.index</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应用程序名称。</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value"> </span></code></pre><h4 id="2-5-国际化（消息源自动配置）"><a href="#2-5-国际化（消息源自动配置）" class="headerlink" title="2.5 国际化（消息源自动配置）"></a>2.5 国际化（消息源自动配置）</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#</span><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span> <span class="token attr-value">messages</span><span class="token comment" spellcheck="true"># 以逗号分隔的基础名称列表，每个都在ResourceBundle约定之后。</span><span class="token comment" spellcheck="true"># 加载的资源束文件缓存到期，以秒为单位。 设置为-1时，软件包将永久缓存。</span><span class="token attr-name">spring.messages.cache-seconds</span><span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token comment" spellcheck="true"># 消息编码。</span><span class="token attr-name">spring.messages.encoding</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 设置是否返回到系统区域设置，如果没有找到特定语言环境的文件。</span><span class="token attr-name">spring.messages.fallback-to-system-locale</span><span class="token punctuation">=</span> <span class="token attr-value">true</span></code></pre><h4 id="2-6-Spring-核心配置"><a href="#2-6-Spring-核心配置" class="headerlink" title="2.6 Spring 核心配置"></a>2.6 Spring 核心配置</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 跳过搜索BeanInfo类。</span><span class="token attr-name">spring.beaninfo.ignore</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># spring 缓存配置</span><span class="token comment" spellcheck="true"># 由底层缓存管理器支持的要创建的缓存名称的逗号分隔列表。</span><span class="token attr-name">spring.cache.cache-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化EhCache的配置文件的位置。</span><span class="token attr-name">spring.cache.ehcache.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于创建缓存的规范。 检查CacheBuilderSpec有关规格格式的更多细节。</span><span class="token attr-name">spring.cache.guava.spec</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化Hazelcast的配置文件的位置。</span><span class="token attr-name">spring.cache.hazelcast.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化Infinispan的配置文件的位置。</span><span class="token attr-name">spring.cache.infinispan.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化缓存管理器的配置文件的位置。</span><span class="token attr-name">spring.cache.jcache.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于检索符合JSR-107的缓存管理器的CachingProvider实现的完全限定名称。 只有在类路径上有多个JSR-107实现可用时才需要。</span><span class="token attr-name">spring.cache.jcache.provider</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 缓存类型，默认情况下根据环境自动检测。</span><span class="token attr-name">spring.cache.type</span><span class="token punctuation">=</span><span class="token attr-value"> </span></code></pre><h4 id="2-7-WEB属性"><a href="#2-7-WEB属性" class="headerlink" title="2.7 WEB属性"></a>2.7 WEB属性</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 文件上传属性</span><span class="token comment" spellcheck="true"># 启用对文件上传的支持。</span><span class="token attr-name">multipart.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 将文件写入磁盘后的阈值。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><span class="token attr-name">multipart.file-size-threshold</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 上传文件的位置。</span><span class="token attr-name">multipart.location</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 最大文件大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><span class="token attr-name">multipart.max-file-size</span><span class="token punctuation">=</span> <span class="token attr-value">1Mb</span><span class="token comment" spellcheck="true"># 最大请求大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><span class="token attr-name">multipart.max-request-size</span><span class="token punctuation">=</span> <span class="token attr-value">10Mb</span></code></pre><h4 id="2-8-服务器属性"><a href="#2-8-服务器属性" class="headerlink" title="2.8 服务器属性"></a>2.8 服务器属性</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 服务器应绑定到的网络地址。</span><span class="token attr-name">server.address</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 如果启用响应压缩。</span><span class="token attr-name">server.compression.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 从压缩中排除的用户代理列表。</span><span class="token attr-name">server.compression.excluded-user-agents</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应该压缩的MIME类型的逗号分隔列表。 例如`text / html，text / css，application / json`</span><span class="token attr-name">server.compression.mime-types</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 执行压缩所需的最小响应大小。 例如2048</span><span class="token attr-name">server.compression.min-response-size</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Servlet上下文初始化参数。 例如`server.context-parameters.a =  alpha`</span><span class="token attr-name">server.context-parameters.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应用程序的上下文路径。</span><span class="token attr-name">server.context-path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 显示应用程序的名称。</span><span class="token attr-name">server.display-name</span><span class="token punctuation">=</span> <span class="token attr-value">application</span><span class="token comment" spellcheck="true"># 何时包含“stacktrace”属性。</span><span class="token attr-name">server.error.include-stacktrace</span><span class="token punctuation">=</span> <span class="token attr-value">never</span><span class="token comment" spellcheck="true"># 错误控制器的路径。</span><span class="token attr-name">server.error.path</span><span class="token punctuation">=</span> <span class="token attr-value">/error</span><span class="token comment" spellcheck="true"># 启动浏览器中出现服务器错误时显示的默认错误页面。</span><span class="token attr-name">server.error.whitelabel.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># JSP servlet的类名。</span><span class="token attr-name">server.jsp-servlet.class-name</span><span class="token punctuation">=</span> <span class="token attr-value">org.apache.jasper.servlet.JspServlet</span><span class="token comment" spellcheck="true"># Init参数用于配置JSP servlet</span><span class="token attr-name">server.jsp-servlet.init-parameters.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># JSP servlet是否被注册</span><span class="token attr-name">server.jsp-servlet.registered</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 服务器HTTP端口。</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span> <span class="token attr-value">8080</span><span class="token comment" spellcheck="true"># 主调度程序servlet的路径。</span><span class="token attr-name">server.servlet-path</span><span class="token punctuation">=</span> <span class="token attr-value">/</span><span class="token comment" spellcheck="true"># 会话cookie的注释。</span><span class="token attr-name">server.session.cookie.comment</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的域。</span><span class="token attr-name">server.session.cookie.domain</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># “HttpOnly”标志为会话cookie。</span><span class="token attr-name">server.session.cookie.http-only</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的最大时长（以秒为单位）。</span><span class="token attr-name">server.session.cookie.max-age</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie名称。</span><span class="token attr-name">server.session.cookie.name</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的路径。</span><span class="token attr-name">server.session.cookie.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的“安全”标志。</span><span class="token attr-name">server.session.cookie.secure</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 重启之间持续会话数据。</span><span class="token attr-name">server.session.persistent</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 用于存储会话数据的目录。</span><span class="token attr-name">server.session.store-dir</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话超时（秒）。</span><span class="token attr-name">server.session.timeout</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话跟踪模式（以下一个或多个：“cookie”，“url”，“ssl”）。</span><span class="token attr-name">server.session.tracking-modes</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 支持SSL密码。</span><span class="token attr-name">server.ssl.ciphers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 客户端认证是否需要（“want”）或需要（“need”）。 需要信任存储。</span><span class="token attr-name">server.ssl.client-auth</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ssl配置</span><span class="token attr-name">server.ssl.enabled</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-alias</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store-password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store-provider</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store-type</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.protocol</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store-password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store-provider</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store-type</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 创建日志文件的目录。 可以相对于tomcat base dir或absolute。</span><span class="token attr-name">server.tomcat.accesslog.directory</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用访问日志。</span><span class="token attr-name">server.tomcat.accesslog.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 访问日志的格式化模式。</span><span class="token attr-name">server.tomcat.accesslog.pattern</span><span class="token punctuation">=</span> <span class="token attr-value">common</span><span class="token comment" spellcheck="true"># 日志文件名前缀。</span><span class="token attr-name">server.tomcat.accesslog.prefix</span><span class="token punctuation">=</span> <span class="token attr-value">access_log</span><span class="token comment" spellcheck="true"># 日志文件名后缀。</span><span class="token attr-name">server.tomcat.accesslog.suffix</span><span class="token punctuation">=</span> <span class="token attr-value">.log</span><span class="token comment" spellcheck="true"># 在调用backgroundProcess方法之间延迟秒。</span><span class="token attr-name">server.tomcat.background-processor-delay</span><span class="token punctuation">=</span> <span class="token attr-value">30</span><span class="token comment" spellcheck="true"># Tomcat基本目录。 如果未指定，将使用临时目录。</span><span class="token attr-name">server.tomcat.basedir</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 正则表达式匹配可信IP地址。</span><span class="token attr-name">server.tomcat.internal-proxies</span><span class="token punctuation">=</span> <span class="token attr-value">10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\192\\.168\\.\\d{1,3}\\.\\d{1,3}|\\169\\.254\\.\\d{1,3}\\.\\d{1,3}|\\127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}</span><span class="token comment" spellcheck="true"># HTTP消息头的最大大小（以字节为单位）。</span><span class="token attr-name">server.tomcat.max-http-header-size</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 最大工作线程数。</span><span class="token attr-name">server.tomcat.max-threads</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 用于覆盖原始端口值的HTTP头的名称。</span><span class="token attr-name">server.tomcat.port-header</span><span class="token punctuation">=</span> <span class="token attr-value">X-Forwarded-Port</span><span class="token comment" spellcheck="true"># 头文件，保存传入协议，通常命名为“X-Forwarded-Proto”。</span><span class="token attr-name">server.tomcat.protocol-header</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 表示传入请求使用SSL的协议头的值。</span><span class="token attr-name">server.tomcat.protocol-header-https-value</span><span class="token punctuation">=</span> <span class="token attr-value">https</span><span class="token comment" spellcheck="true"># 提取远程ip的HTTP头的名称。 例如`X-FORWARDED-FOR`</span><span class="token attr-name">server.tomcat.remote-ip-header</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于解码URI的字符编码。</span><span class="token attr-name">server.tomcat.uri-encoding</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 访问日志目录。</span><span class="token attr-name">server.undertow.accesslog.dir</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用访问日志。</span><span class="token attr-name">server.undertow.accesslog.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 访问日志的格式化模式。</span><span class="token attr-name">server.undertow.accesslog.pattern</span><span class="token punctuation">=</span> <span class="token attr-value">common</span><span class="token comment" spellcheck="true"># 每个缓冲区的大小字节数。</span><span class="token attr-name">server.undertow.buffer-size</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 每个区域的缓冲区数。</span><span class="token attr-name">server.undertow.buffers-per-region</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 在Java堆之外分配缓冲区。</span><span class="token attr-name">server.undertow.direct-buffers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 为工作者创建的I / O线程数。</span><span class="token attr-name">server.undertow.io-threads</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 工作线程数。</span><span class="token attr-name">server.undertow.worker-threads</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 如果X-Forwarded- *头应该应用于HttpRequest。</span><span class="token attr-name">server.use-forward-headers</span><span class="token punctuation">=</span><span class="token attr-value"> </span></code></pre><h3 id="3-自定义属性与加载"><a href="#3-自定义属性与加载" class="headerlink" title="3 自定义属性与加载"></a>3 自定义属性与加载</h3><h4 id="3-1-自定义属性"><a href="#3-1-自定义属性" class="headerlink" title="3.1 自定义属性"></a>3.1 自定义属性</h4><p>我们在使用Spring Boot的时候，通常也需要定义一些自己使用的属性，我们可以如下方式直接定义：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#自定义配置属性</span><span class="token attr-name">com.example.demo.property1</span><span class="token punctuation">=</span><span class="token attr-value">text</span><span class="token attr-name">com.example.demo.property2</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">com.example.demo.property3</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p>然后通过<code>@Value(&quot;${属性名}&quot;)</code>注解来加载对应的配置属性，具体如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestProperties</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${com.example.demo.property1}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String property1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${com.example.demo.property2}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> property2<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${com.example.demo.property3}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> property3<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后我们来测试一下。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TestProperties testProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>testProperties<span class="token punctuation">.</span><span class="token function">getProperty1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>testProperties<span class="token punctuation">.</span><span class="token function">getProperty2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>testProperties<span class="token punctuation">.</span><span class="token function">isProperty3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-参数间的引用"><a href="#3-2-参数间的引用" class="headerlink" title="3.2 参数间的引用"></a>3.2 参数间的引用</h4><p>在<code>application.properties</code>中的各个参数之间也可以直接引用来使用，就像下面的设置：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">com.example.demo.property4</span><span class="token punctuation">=</span><span class="token attr-value">${com.example.demo.property1}+${com.example.demo.property2}</span></code></pre><h4 id="3-3-使用随机数"><a href="#3-3-使用随机数" class="headerlink" title="3.3 使用随机数"></a>3.3 使用随机数</h4><p>有时候对于一些特殊的属性的时候，我们并不希望它的参数值是一个固定的值。这样的话我们就需要使用到随机数的概念。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 随机字符串</span><span class="token attr-name">com.example.demo.random.value</span><span class="token punctuation">=</span><span class="token attr-value">${random.value}</span><span class="token comment" spellcheck="true"># 随机int</span><span class="token attr-name">com.example.demo.random.number</span><span class="token punctuation">=</span><span class="token attr-value">${random.int}</span><span class="token comment" spellcheck="true"># 随机long</span><span class="token attr-name">com.example.demo.random.bignumber</span><span class="token punctuation">=</span><span class="token attr-value">${random.long}</span><span class="token comment" spellcheck="true"># 10以内的随机数</span><span class="token attr-name">com.example.demo.random.test1</span><span class="token punctuation">=</span><span class="token attr-value">${random.int(10)}</span><span class="token comment" spellcheck="true"># 10-20的随机数</span><span class="token attr-name">com.example.demo.random.test2</span><span class="token punctuation">=</span><span class="token attr-value">${random.int[10,20]}</span></code></pre><h4 id="3-4-通过命令行设置属性值"><a href="#3-4-通过命令行设置属性值" class="headerlink" title="3.4 通过命令行设置属性值"></a>3.4 通过命令行设置属性值</h4><p>在命令行运行时，连续的两个减号<code>--</code>就是对<code>application.properties</code>中的属性值进行赋值的标识。所以，<code>java -jar xxx.jar --server.port=8888</code>命令，等价于我们在<code>application.properties</code>中添加属性<code>server.port=8888</code>，该设置在样例工程中可见，读者可通过删除该值或使用命令行来设置该值来验证。</p><p>通过命令行来修改属性值固然提供了不错的便利性，但是通过命令行就能更改应用运行的参数，那岂不是很不安全？是的，所以Spring Boot也贴心的提供了屏蔽命令行访问属性的设置，只需要这句设置就能屏蔽：<code>SpringApplication.setAddCommandLineProperties(false)</code>。</p><h4 id="3-5-多环境配置"><a href="#3-5-多环境配置" class="headerlink" title="3.5 多环境配置"></a>3.5 多环境配置</h4><p>我们在开发Spring Boot的时候会发现，我们针对多个环境需要配置多种配置文件。比如：开发、测试、生产等。</p><p>在Spring Boot中多环境配置文件名需要满足<code>application-{profile}.properties</code>的格式，其中<code>{profile}</code>对应你的环境标识，比如：</p><ul><li><code>application-dev.properties</code>：开发环境</li><li><code>application-test.properties</code>：测试环境</li><li><code>application-prod.properties</code>：生产环境</li></ul><p>至于哪个具体的配置文件会被加载，需要在<code>application.properties</code>文件中通过<code>spring.profiles.active</code>属性来设置，其值对应<code>{profile}</code>值。</p><p>如：<code>spring.profiles.active=test</code>就会加载<code>application-test.properties</code>配置文件内容</p><h4 id="3-6-ConfigurationProperties"><a href="#3-6-ConfigurationProperties" class="headerlink" title="3.6 @ConfigurationProperties"></a>3.6 @ConfigurationProperties</h4><p>手动书写@Value还是比较繁重的工作，好在Spring Boot提供了更简洁的方式。@ConfigurationProperties(prefix = “test”)。prefix指定了配置文件的前缀为test，并且按照属性名进行自动匹配，例如：test.name属性值会自动加载到private String name域中。</p><p>Spring Boot1.5之前的写法:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">,</span> locations <span class="token operator">=</span> <span class="token string">"classpath:xxxx.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long tel<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// setter getter</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之使用篇:5.服务器端参数校验</title>
      <link href="/2019/03/23/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-5.fu-wu-qi-duan-can-shu-xiao-yan/"/>
      <url>/2019/03/23/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-5.fu-wu-qi-duan-can-shu-xiao-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-之前的服务端校验："><a href="#1-之前的服务端校验：" class="headerlink" title="1.之前的服务端校验："></a>1.之前的服务端校验：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @param menuUpdateBo 菜单修改数据Bo * @return * @Description:校验修改数据是否正确 * @author kangyuansheng * @date 2018/10/30 14:17 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkUpdateMenu</span><span class="token punctuation">(</span>MenuUpdateBo menuUpdateBo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>menuUpdateBo <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用户id必须输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>menuUpdateBo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> menuUpdateBo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//名称必须输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>menuUpdateBo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-新验证框架"><a href="#2-新验证框架" class="headerlink" title="2. 新验证框架"></a>2. 新验证框架</h3><p>Bean Validator 和 Hibernate Validator 就是两套用于验证的框架，二者都遵循 JSR-303 ，可以混着用，但是在某些注解上存在偏差。</p><p>Bean Validation 中内置的约束：</p><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Null</td><td>被注解参数必须为空</td></tr><tr><td>@NotNull</td><td>被注解参数不能为空</td></tr><tr><td>@AssertTrue</td><td>被注解参数必须为 True</td></tr><tr><td>@AssertFalse</td><td>被注解参数必须为 False</td></tr><tr><td>@Min(value)</td><td>被注解参数必须是数字，且其值必须大于等于 value</td></tr><tr><td>@Max(value)</td><td>被注解参数必须是数字，且其值必须小于等于 value</td></tr><tr><td>@DecimaMin(value)</td><td>被注解参数必须是数字，且其值必须大于等于 value</td></tr><tr><td>@DecimaMax(value)</td><td>被注解参数必须是数字，且其值必须小于等于 value</td></tr><tr><td>@Size(max, min)</td><td>被注解参数大小必须在指定范围内</td></tr><tr><td>@Past</td><td>被注解参数必须是一个过去的日期</td></tr><tr><td>@Future</td><td>被注解参数必须是一个将来的日期</td></tr><tr><td>@Pattern(value)</td><td>被注解参数必须符合指定的正则表达式</td></tr><tr><td>@Digits(integer, fraction)</td><td>被注解参数必须是数字，且其值必须在可接受范围内</td></tr><tr><td>@NotBlank</td><td>被注解参数的值不为空（不为 null、去除首位空格后长度为 0），不同于 @NotEmpty，@NotBlank 只应用于字符串且在比较时会去除字符串的空格</td></tr></tbody></table><p>Hibernate Validator 附加的约束：</p><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@NotEmpty</td><td>被注解参数的值不为 null 且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td>@Email</td><td>被注解参数必须是电子邮箱地址</td></tr><tr><td>@Length</td><td>被注解的字符串长度必须在指定范围内</td></tr><tr><td>@Range</td><td>被注解的参数必须在指定范围内</td></tr></tbody></table><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><h5 id="3-1-编写测试用例"><a href="#3-1-编写测试用例" class="headerlink" title="3.1 编写测试用例"></a>3.1 编写测试用例</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserControllerTests</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 普通参数校验     * @param name     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">findStudentByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"名字不能为空"</span><span class="token punctuation">)</span>                                    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"name 长度必须在 {min} - {max} 之间"</span><span class="token punctuation">)</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对象校验     * @param userAddTestDmnObj     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/addUsertest"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addBridge</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> UserAddTestDmnObj userAddTestDmnObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-2-对象校验校验结果："><a href="#3-2-对象校验校验结果：" class="headerlink" title="3.2 对象校验校验结果："></a>3.2 对象校验校验结果：</h5><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Spring-Boot/Spring-Boot-0010.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之使用篇:4.集成Swagger2</title>
      <link href="/2019/03/23/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-4.ji-cheng-swagger2/"/>
      <url>/2019/03/23/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-4.ji-cheng-swagger2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Swagger2介绍："><a href="#1-Swagger2介绍：" class="headerlink" title="1.Swagger2介绍："></a>1.Swagger2介绍：</h3><p><code>Swagger</code>是一款<code>RESTful</code>接口的文档在线自动生成、功能测试功能框架。一个规范和完整的框架，用于生成、描述、调用和可视化<code>RESTful</code>风格的Web服务，加上<code>swagger-ui</code>，可以有很好的呈现。</p><h3 id="2-在项目中引入Swagger2"><a href="#2-在项目中引入Swagger2" class="headerlink" title="2.在项目中引入Swagger2"></a>2.在项目中引入Swagger2</h3><h4 id="2-1修改pom-文件"><a href="#2-1修改pom-文件" class="headerlink" title="2.1修改pom 文件"></a>2.1修改pom 文件</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入swagger2模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2-2-构建swagger2配置类"><a href="#2-2-构建swagger2配置类" class="headerlink" title="2.2 构建swagger2配置类"></a>2.2 构建swagger2配置类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注解开启 swagger2 功能</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token comment" spellcheck="true">//注解标示,这是一个配置类,@Configuation注解包含了@Component注解</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过 createRestApi函数来构建一个DocketBean     * 函数名,可以随意命名,喜欢什么命名就什么命名     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用apiInfo方法,创建一个ApiInfo实例,里面是展示在文档页面信息内容</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//控制暴露出去的路径下的实例</span>                <span class="token comment" spellcheck="true">//如果某个接口不想暴露,可以使用以下注解</span>                <span class="token comment" spellcheck="true">//@ApiIgnore 这样,该接口就不会暴露在 swagger2 的页面下</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.example.demo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构建 api文档的详细信息函数</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//页面标题</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Spring Boot 测试使用 Swagger2 构建RESTful API"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//创建人</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//版本号</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"0.0.1"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//描述</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"API 描述"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3在启动类添加-EnableSwagger2-表示开启Swagger"><a href="#2-3在启动类添加-EnableSwagger2-表示开启Swagger" class="headerlink" title="2.3在启动类添加@EnableSwagger2 表示开启Swagger"></a>2.3在启动类添加<code>@EnableSwagger2</code> 表示开启Swagger</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableSwagger2</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-4-Swagger2文档"><a href="#2-4-Swagger2文档" class="headerlink" title="2.4 Swagger2文档"></a>2.4 Swagger2文档</h4><p>启动SpringBoot项目，访问 <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p><h3 id="3-Swagger2使用"><a href="#3-Swagger2使用" class="headerlink" title="3.Swagger2使用"></a>3.Swagger2使用</h3><h4 id="3-1-Api-协议集描述"><a href="#3-1-Api-协议集描述" class="headerlink" title="3.1 @Api  协议集描述"></a>3.1 <code>@Api</code>  协议集描述</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span>：放在 请求的类上，与<span class="token annotation punctuation">@Controller</span>并列，说明的请求类的用下，如用户登录类，订单类等。    tags<span class="token operator">=</span><span class="token string">"说明该类的作用"</span>    value<span class="token operator">=</span><span class="token string">"该参数没什么意义，所以不需要配置"</span>示例：<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags<span class="token operator">=</span><span class="token string">"APP登录授权"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiLoginController</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><code>@Api</code>详细属性配置：</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Spring-Boot/Spring-Boot-0009.png" alt></p><h4 id="3-2-ApiOperation：方法的说明"><a href="#3-2-ApiOperation：方法的说明" class="headerlink" title="3.2 @ApiOperation：方法的说明"></a>3.2 <code>@ApiOperation</code>：方法的说明</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span>：<span class="token string">"用在请求的方法上，说明方法的作用"</span>    value<span class="token operator">=</span><span class="token string">"说明方法的作用"</span>    notes<span class="token operator">=</span><span class="token string">"方法的备注说明"</span></code></pre><h5 id="3-2-1-ApiImplicitParams、-ApiImplicitParam：方法参数的说明"><a href="#3-2-1-ApiImplicitParams、-ApiImplicitParam：方法参数的说明" class="headerlink" title="3.2.1 @ApiImplicitParams、@ApiImplicitParam：方法参数的说明"></a>3.2.1 <code>@ApiImplicitParams</code>、<code>@ApiImplicitParam</code>：方法参数的说明</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiImplicitParams</span>：用在请求的方法上，包含一组参数说明    <span class="token annotation punctuation">@ApiImplicitParam</span>：对单个参数的说明                name：参数名        value：参数的汉字说明、解释        required：参数是否必须传        paramType：参数放在哪个地方            · header <span class="token operator">--</span><span class="token operator">></span> 请求参数的获取：<span class="token annotation punctuation">@RequestHeader</span>            · query <span class="token operator">--</span><span class="token operator">></span> 请求参数的获取：<span class="token annotation punctuation">@RequestParam</span>            · path（用于restful接口）<span class="token operator">--</span><span class="token operator">></span> 请求参数的获取：<span class="token annotation punctuation">@PathVariable</span>            · body（请求体）<span class="token operator">--</span><span class="token operator">></span>  <span class="token annotation punctuation">@RequestBody</span> User user            · form（不常用）               dataType：参数类型，默认String，其它值dataType<span class="token operator">=</span><span class="token string">"Integer"</span>               defaultValue：参数的默认值示列：<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"用户登录"</span><span class="token punctuation">,</span>notes<span class="token operator">=</span><span class="token string">"手机号、密码都是必输项，年龄随边填，但必须是数字"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"mobile"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">"手机号"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>paramType<span class="token operator">=</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"password"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">"密码"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>paramType<span class="token operator">=</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"age"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">"年龄"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>paramType<span class="token operator">=</span><span class="token string">"form"</span><span class="token punctuation">,</span>dataType<span class="token operator">=</span><span class="token string">"Integer"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> JsonResult <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String mobile<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> String password<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> JsonResult<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-ApiResponses、-ApiResponse：方法返回值的说明"><a href="#3-3-ApiResponses、-ApiResponse：方法返回值的说明" class="headerlink" title="3.3 @ApiResponses、@ApiResponse：方法返回值的说明"></a>3.3 <code>@ApiResponses</code>、<code>@ApiResponse</code>：方法返回值的说明</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiResponses</span>：方法返回对象的说明    <span class="token annotation punctuation">@ApiResponse</span>：每个参数的说明        code：数字，例如<span class="token number">400</span>        message：信息，例如<span class="token string">"请求参数没填好"</span>        response：抛出异常的类示例：<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"获取用户信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"userId"</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户Id"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ApiResponses</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"请求参数没填好"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"请求路径没有或页面跳转路径不对"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token keyword">public</span> JsonResult <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> JsonResult<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span> pageUtil<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-ApiModel、-ApiModelProperty：用于响应类上，表示一个返回响应数据的信息"><a href="#3-4-ApiModel、-ApiModelProperty：用于响应类上，表示一个返回响应数据的信息" class="headerlink" title="3.4 @ApiModel、@ApiModelProperty：用于响应类上，表示一个返回响应数据的信息"></a>3.4 <code>@ApiModel</code>、<code>@ApiModelProperty</code>：用于响应类上，表示一个返回响应数据的信息</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span>：用于响应类上，表示一个返回响应数据的信息            （这种一般用在post创建的时候，使用<span class="token annotation punctuation">@RequestBody</span>这样的场景，            请求参数无法使用 <span class="token annotation punctuation">@ApiImplicitParam</span> 注解进行描述的时候）    <span class="token annotation punctuation">@ApiModelProperty</span>：用在属性上，描述响应类的属性示例<span class="token operator">:</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>description<span class="token operator">=</span> <span class="token string">"返回响应数据"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestMessage</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"是否成功"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> success<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回对象"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"错误编号"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer errCode<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"错误信息"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* getter/setter */</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Swagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之使用篇:3.集成Lombok</title>
      <link href="/2019/03/23/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-3.ji-cheng-lombok/"/>
      <url>/2019/03/23/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-3.ji-cheng-lombok/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Lombok介绍："><a href="#1-Lombok介绍：" class="headerlink" title="1.Lombok介绍："></a>1.Lombok介绍：</h3><p>Lombok 是一种 Java™ 实用工具，可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）。它通过注解实现这一目的。</p><h3 id="2-idea安装插件-离线版"><a href="#2-idea安装插件-离线版" class="headerlink" title="2.idea安装插件(离线版)"></a>2.idea安装插件(离线版)</h3><h4 id="2-1-下载插件包"><a href="#2-1-下载插件包" class="headerlink" title="2.1 下载插件包"></a>2.1 下载插件包</h4><p>地址：<a href="http://plugins.jetbrains.com/plugin/6317-lombok-plugin" target="_blank" rel="noopener">http://plugins.jetbrains.com/plugin/6317-lombok-plugin</a></p><p>根据对应的idea版本进行下载。</p><h4 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h4><p>依次进入IDEA–&gt;Settings/Preferences–&gt;Plugins</p><h3 id="3-在项目中引入Lombok"><a href="#3-在项目中引入Lombok" class="headerlink" title="3.在项目中引入Lombok"></a>3.在项目中引入Lombok</h3><h4 id="3-1修改pom-文件"><a href="#3-1修改pom-文件" class="headerlink" title="3.1修改pom 文件"></a>3.1修改pom 文件</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入lombok模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="3-2使用"><a href="#3-2使用" class="headerlink" title="3.2使用"></a>3.2使用</h4><h5 id="3-2-1-注解介绍"><a href="#3-2-1-注解介绍" class="headerlink" title="3.2.1 注解介绍"></a>3.2.1 注解介绍</h5><ul><li><p>@Data</p><p>注解在 <strong>类</strong> 上；提供类所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString 方法。</p></li><li><p>@Setter</p><p>注解在 <strong>属性</strong> 上；为单个属性提供 set 方法; 注解在 <strong>类</strong> 上，为该类所有的属性提供 set 方法， 都提供默认构造方法。</p></li><li><p>@Getter</p><p>注解在 <strong>属性</strong> 上；为单个属性提供 get 方法; 注解在 <strong>类</strong> 上，为该类所有的属性提供 get 方法，都提供默认构造方法。</p></li><li><p>@Log4j</p><p>注解在 <strong>类</strong> 上；为类提供一个 属性名为 log 的 log4j 日志对象，提供默认构造方法。</p></li><li><p>@AllArgsConstructor</p><p>注解在 <strong>类</strong> 上；为类提供一个全参的构造方法，加了这个注解后，类中不提供默认构造方法了。</p></li><li><p>@NoArgsConstructor</p><p>注解在 <strong>类</strong> 上；为类提供一个无参的构造方法。</p></li><li><p>@EqualsAndHashCode</p><p>注解在 <strong>类</strong> 上, 可以生成 equals、canEqual、hashCode 方法。</p></li><li><p>@NonNull</p><p>注解在 <strong>属性</strong> 上，会自动产生一个关于此参数的非空检查，如果参数为空，则抛出一个空指针异常，也会有一个默认的无参构造方法。</p></li><li><p>@Cleanup</p><p>这个注解用在 <strong>变量</strong> 前面，可以保证此变量代表的资源会被自动关闭，默认是调用资源的 close() 方法，如果该资源有其它关闭方法，可使用 @Cleanup(“methodName”) 来指定要调用的方法，也会生成默认的构造方法</p></li><li><p>@ToString</p><p>这个注解用在 <strong>类</strong> 上，可以生成所有参数的 toString 方法，还会生成默认的构造方法。</p></li><li><p>@RequiredArgsConstructor</p><p>这个注解用在 <strong>类</strong> 上，使用类中所有带有 @NonNull 注解的或者带有 final 修饰的成员变量生成对应的构造方法。</p></li><li><p>@Value</p><p>这个注解用在 <strong>类</strong> 上，会生成含所有参数的构造方法，get 方法，此外还提供了equals、hashCode、toString 方法。</p></li><li><p>@SneakyThrows</p><p>这个注解用在 <strong>方法</strong> 上，可以将方法中的代码用 try-catch 语句包裹起来，捕获异常并在 catch 中用 Lombok.sneakyThrow(e) 把异常抛出，可以使用 @SneakyThrows(Exception.class) 的形式指定抛出哪种异常，也会生成默认的构造方法。</p></li><li><p>@Synchronized</p><p>这个注解用在 <strong>类方法</strong> 或者 <strong>实例方法</strong> 上，效果和 synchronized 关键字相同，区别在于锁对象不同，对于类方法和实例方法，synchronized 关键字的锁对象分别是类的 class 对象和 this 对象，而 @Synchronized 的锁对象分别是 私有静态 final 对象 lock 和 私有 final 对象 lock，当然，也可以自己指定锁对象，此外也提供默认的构造方法。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之使用篇:2.集成Jooq</title>
      <link href="/2019/03/23/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-2.ji-cheng-jooq/"/>
      <url>/2019/03/23/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-2.ji-cheng-jooq/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Jooq介绍："><a href="#1-Jooq介绍：" class="headerlink" title="1.Jooq介绍："></a>1.Jooq介绍：</h3><p>jOOQ是一个基于Java编写SQL的工具包，具有：简单、轻量、函数式编程写SQL等独特优势，非常适合敏捷快速迭代开发。</p><h3 id="2-集成Jooq"><a href="#2-集成Jooq" class="headerlink" title="2.集成Jooq"></a>2.集成Jooq</h3><h4 id="2-1-修改pom-xml"><a href="#2-1-修改pom-xml" class="headerlink" title="2.1 修改pom.xml"></a>2.1 修改pom.xml</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>spring_boot_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入Web模块 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入Mysql模块 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入spring-boot-jooq模块 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入lombok模块 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jooq-codegen-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jooq.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>generate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">></span></span>src/main/resources/jooq/JooqConfig.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h4 id="2-2-添加JooqConfig-xml配置文件"><a href="#2-2-添加JooqConfig-xml配置文件" class="headerlink" title="2.2 添加JooqConfig.xml配置文件"></a>2.2 添加JooqConfig.xml配置文件</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Configure the database connection here --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbc</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/spring_boot_db<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbc</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- The default code generator. You can override this one, to generate your own code style.              Supported generators:                - org.jooq.codegen.JavaGenerator                - org.jooq.codegen.ScalaGenerator                Defaults to org.jooq.codegen.JavaGenerator --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>org.jooq.codegen.JavaGenerator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- The database type. The format here is:                    org.util.[database].[database]Database --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>org.jooq.meta.mysql.MySQLDatabase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- The database schema (or in the absence of schema support, in your RDBMS this can be the owner, user, database name) to be generated --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inputSchema</span><span class="token punctuation">></span></span>spring_boot_db<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inputSchema</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- All elements that are generated from your schema (A Java regular expression. Use the pipe to separate several expressions) Watch out for case-sensitivity. Depending on your database, this might be important! --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- All elements that are excluded from your schema (A Java regular expression. Use the pipe to separate several expressions). Excludes match before includes, i.e. excludes have a higher priority --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- The destination package of your generated classes (within the destination directory) --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageName</span><span class="token punctuation">></span></span>com.example.demo.db.jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packageName</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- The destination directory of your generated classes. Using Maven directory layout here --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generator</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h4 id="2-3-在application-properties中配置数据源"><a href="#2-3-在application-properties中配置数据源" class="headerlink" title="2.3 在application.properties中配置数据源"></a>2.3 在application.properties中配置数据源</h4><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#datasource</span><span class="token comment" spellcheck="true">#驱动名</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true">#url</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/spring_boot_db?characterEncoding=utf-8</span><span class="token comment" spellcheck="true">#用户名</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token comment" spellcheck="true">#密码</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span></code></pre><h4 id="2-4-生成jooq文件"><a href="#2-4-生成jooq文件" class="headerlink" title="2.4 生成jooq文件"></a>2.4 生成jooq文件</h4><p>先clean然后在点击compile来生成jooq文件。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Spring-Boot/Spring-Boot-0008.png" alt></p><h3 id="3-编写测试用例"><a href="#3-编写测试用例" class="headerlink" title="3.编写测试用例"></a>3.编写测试用例</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JooqTests</span>   <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DSLContext dsl<span class="token punctuation">;</span>    <span class="token keyword">private</span> CoreUserTbl coreUserTbl <span class="token operator">=</span> CoreUserTbl<span class="token punctuation">.</span>CORE_USER_TBL<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUserTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserAddBo userAddBo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAddBo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userAddBo<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userAddBo<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> state <span class="token operator">=</span>  dsl<span class="token punctuation">.</span><span class="token function">insertInto</span><span class="token punctuation">(</span>coreUserTbl<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">columns</span><span class="token punctuation">(</span>coreUserTbl<span class="token punctuation">.</span>USERNAME_<span class="token punctuation">,</span> coreUserTbl<span class="token punctuation">.</span>PASSWORD_<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">values</span><span class="token punctuation">(</span>userAddBo<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userAddBo<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUserTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CoreUserTblRecord coreUserTblRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoreUserTblRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coreUserTblRecord<span class="token punctuation">.</span><span class="token function">setId_</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        coreUserTblRecord<span class="token punctuation">.</span><span class="token function">setUsername_</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coreUserTblRecord<span class="token punctuation">.</span><span class="token function">setPassword_</span><span class="token punctuation">(</span><span class="token string">"00000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> state <span class="token operator">=</span>   dsl<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>coreUserTbl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>coreUserTblRecord<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUserTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> state <span class="token operator">=</span> dsl<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>coreUserTbl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>coreUserTbl<span class="token punctuation">.</span>ID_<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Jooq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot系列之使用篇:1.HelloWord搭建与初步了解</title>
      <link href="/2018/09/14/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-1.helloword-da-jian-yu-chu-bu-liao-jie/"/>
      <url>/2018/09/14/spring-boot/shi-yong-pian/spring-boot-xi-lie-zhi-shi-yong-pian-1.helloword-da-jian-yu-chu-bu-liao-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Spring-Boot的介绍："><a href="#1-Spring-Boot的介绍：" class="headerlink" title="1.Spring Boot的介绍："></a>1.Spring Boot的介绍：</h3><p>Spring最重要的是以下四个核心。</p><ul><li>自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置</li><li>起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。</li><li>命令行界面：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建。</li><li>Actuator：让你能够深入运行中的Spring Boot应用程序，一探究竟。</li></ul><h3 id="2-搭建HelloWord项目"><a href="#2-搭建HelloWord项目" class="headerlink" title="2.搭建HelloWord项目"></a>2.搭建HelloWord项目</h3><p>目前构建项目有多种方式我这里简单介绍两种。</p><ul><li>使用spring官网 SPRING INITIALIZR 来构建项目结构（地址：<a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a>）</li><li>使用IntelliJ IDEA开发工具来构建项目结构</li></ul><h4 id="2-1-使用Spring官网-SPRING-INITIALIZR-来构建项目结构"><a href="#2-1-使用Spring官网-SPRING-INITIALIZR-来构建项目结构" class="headerlink" title="2.1 使用Spring官网 SPRING INITIALIZR 来构建项目结构"></a>2.1 使用Spring官网 SPRING INITIALIZR 来构建项目结构</h4><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Spring-Boot/Spring-Boot-0001.png" alt></p><p>点击Generate Project就会下载一个根据你配置生成的压缩文件，然后进行解压。</p><p>打开idea导入刚下载的项目，然后一直下一步就可以了。导入之后可以需要下载一段时间的jar包，不要急稍微等待一会。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Spring-Boot/Spring-Boot-0002.png" alt></p><h4 id="2-2-使用IntelliJ-IDEA开发工具来构建项目结构"><a href="#2-2-使用IntelliJ-IDEA开发工具来构建项目结构" class="headerlink" title="2.2 使用IntelliJ IDEA开发工具来构建项目结构"></a>2.2 使用IntelliJ IDEA开发工具来构建项目结构</h4><p>首先我们打开idea选择创建新项目。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Spring-Boot/Spring-Boot-0003.png" alt></p><p>在打开的界面中选择Spring Initializr-&gt;然后选择Next即可</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Spring-Boot/Spring-Boot-0004.png" alt></p><p>在该界面中填写项目对应配置。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Spring-Boot/Spring-Boot-0005.png" alt></p><p>根据需要下载对应的模块。</p><h3 id="3-Spring-Boot目录结构"><a href="#3-Spring-Boot目录结构" class="headerlink" title="3.Spring Boot目录结构:"></a>3.Spring Boot目录结构:</h3><blockquote><ul><li>/src/main/java  存放项目所有源代码目录</li><li>/src//main/resources  存放项目所有资源文件以及配置文件目录</li><li>/src/test  存放测试代码目录</li></ul></blockquote><p>这个时候按照idea搭建了一个Spring Boot项目,这个时候我们发现这个项目已经自动生成了一些文件.</p><h4 id="3-1-SpringbootcodebaseApplication"><a href="#3-1-SpringbootcodebaseApplication" class="headerlink" title="3.1 SpringbootcodebaseApplication"></a>3.1 SpringbootcodebaseApplication</h4><p>该类是程序的入口,类内有个main方法.</p><pre class=" language-Java"><code class="language-Java">/** * @SpringBootApplication 声明当前类为sprinboot的入口类 * 一个springboot项目内有且只能有一个这个注解存在 */@SpringBootApplicationpublic class SpringbootCodeBaseApplication {    public static void main(String[] args) {        SpringApplication.run(SpringbootCodeBaseApplication.class, args);    }}</code></pre><p>首先我们看一下启动注解@SpringBootApplication的源码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这个时候我们就发现<code>@SpringBootApplication</code>是一个复合注解，主要包括了<code>@ComponentScan</code>，和<code>@SpringBootConfiguration</code>，<code>@EnableAutoConfiguration</code>。</p><ul><li><code>@SpringBootConfiguration</code>继承自<code>@Configuration</code>，二者功能也一致，标注当前类是配置类，并会将当前类内声明的一个或多个以<code>@Bean</code>注解标记的方法的实例纳入到<code>srping</code>容器中，并且实例名就是方法名。</li><li><code>@EnableAutoConfiguration</code>是springboot实现自动化配置的核心注解，通过这个注解把spring应用所需的bean注入容器中．<code>@EnableAutoConfiguration</code>源码通过<code>@Import</code>注入了一个<code>ImportSelector</code>的实现类<br> <code>AutoConfigurationImportSelector</code>,这个<code>ImportSelector</code>最终实现根据我们的配置，动态加载所需的bean。</li><li><code>@ComponentScan</code>，扫描当前包及其子包下被<code>@Component</code>，<code>@Controller</code>，<code>@Service</code>，<code>@Repository</code>注解标记的类并纳入到spring容器中进行管理。是以前的<code>&lt;context:component-scan&gt;</code>（以前使用在xml中使用的标签，用来扫描包配置的平行支持）。所以本demo中的User为何会被<code>spring</code>容器管理。</li></ul><p><code>@SpringBootApplication</code>只会扫描<code>@SpringBootApplication</code>注解标记类包下及其子包的类（特定注解标记，比如说<code>@Controller</code>，<code>@Service</code>，<code>@Component</code>,<code>@Configuration</code>和<code>@Bean</code>注解等等）纳入到spring容器。</p><p>假如出现与之不在同一个包下的类，则需要指定扫描路径：<code>@SpringBootApplication(scanBasePackages = &quot;xxx.xxx.xxx&quot;)</code></p><p>不让某个类扫描到则需要添加<code>exclude或excludeName</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> xxx<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>excludeName <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"xxx.xx.xxx"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="3-2-application-properties"><a href="#3-2-application-properties" class="headerlink" title="3.2 application.properties"></a>3.2 application.properties</h4><p>该配置文件是项目的核心配置文件</p><h4 id="3-3-pom-xml-maven配置文件"><a href="#3-3-pom-xml-maven配置文件" class="headerlink" title="3.3 pom.xml  maven配置文件"></a>3.3 pom.xml  maven配置文件</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入Web模块  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="编写HelloWorld"><a href="#编写HelloWorld" class="headerlink" title="编写HelloWorld:"></a>编写HelloWorld:</h3><p>创建HelloController类</p><pre class=" language-Java"><code class="language-Java">/** * @RestController: * Spring4之后新加入的注解，原来返回json需要@ResponseBody和@Controller配合。 * 即@RestController是@ResponseBody和@Controller的组合注解。 */@RestControllerpublic class HelloController {    /**     * @RequestMapping 配置url映射     * @RequestMapping此注解即可以作用在控制器的某个方法上，也可以作用在此控制器类上。     * 当控制器在类级别上添加@RequestMapping注解时，这个注解会应用到控制器的所有处理器方法上。     * 处理器方法上的@RequestMapping注解会对类级别上的@RequestMapping的声明进行补充。     */    @RequestMapping("/hello")    public String index() {        return "Hello World";    }}</code></pre><p>启动主程序，打开浏览器访问<a href="http://localhost:8080/hello，可以看到页面输出Hello" target="_blank" rel="noopener">http://localhost:8080/hello，可以看到页面输出Hello</a> World</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列之框架篇:1.如何搭建BDF3框架</title>
      <link href="/2018/09/13/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-da-jian-kai-fa-huan-jing/"/>
      <url>/2018/09/13/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-da-jian-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Eclipse配置"><a href="#Eclipse配置" class="headerlink" title="Eclipse配置"></a>Eclipse配置</h1><h2 id="修改Eclipse字体大小"><a href="#修改Eclipse字体大小" class="headerlink" title="修改Eclipse字体大小"></a>修改Eclipse字体大小</h2><p>[window]-&gt;[preferences]-&gt;[General]-&gt;[Appearance]-&gt;[Colors and Fonts]-&gt;[Basic]-&gt;点击展开Basic,最下面有 Text Font 这个选项，点击，然后修改保存即可。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0004.png" alt="cmd-markdown-logo"></p><h2 id="配置Dorado7开发插件"><a href="#配置Dorado7开发插件" class="headerlink" title="配置Dorado7开发插件"></a>配置Dorado7开发插件</h2><p>首先我们需要在官方网站上下载一个最新版的Eclipse。</p><p>在Eclipse的安装文件目录中找到dropins，将Dorado7开发插件的文件夹拷贝到其中。</p><p><strong>注意：</strong></p><p>假如用Eclipse配置完Dorado7开发插件之后，打开View视图出现<strong>An error has occurred,See error log for more details</strong>报错。</p><p>解决方法：在”开始”–&gt;”运行”—-&gt;打入”cmd”进入命令提示行后,再进入eclipse的安装目录,<br>         然后输入eclipse -clean即可（我用的这个方法 成功了）</p><h2 id="配置Jetty插件"><a href="#配置Jetty插件" class="headerlink" title="配置Jetty插件"></a>配置Jetty插件</h2><p>[Help]-&gt;[Eclipse Marketplace]-&gt;在搜索条中输入Jetty点击搜索，找到Jetty插件点击<strong>Install</strong>，然后把插件安装下来就好了。(Ps:下载慢的小伙伴可以需要一个科学上网的工具。)</p><h2 id="配置JRebel插件"><a href="#配置JRebel插件" class="headerlink" title="配置JRebel插件"></a>配置JRebel插件</h2><p>我们安装完Jetty插件之后还需要安装一个插件JRebel：可快速实现热部署，节省了大量重启时间，提高了个人开发效率。</p><p>当下载完成之后需要激活一下才能使用。</p><h2 id="关于Eclipse性能优化"><a href="#关于Eclipse性能优化" class="headerlink" title="关于Eclipse性能优化"></a>关于Eclipse性能优化</h2><h3 id="减少Eclipse启动后自动启动的插件"><a href="#减少Eclipse启动后自动启动的插件" class="headerlink" title="减少Eclipse启动后自动启动的插件"></a>减少Eclipse启动后自动启动的插件</h3><p>具体操作: 在Preferences -&gt; General -&gt; StartUp and Shutdown: 将除Plug-ins activated on startup以外的项目有节选的去掉（比如Mylyn等没用到,就去掉了）<br>效果: 启动Eclipse后,会有Initialing Java Tools的滚动条,会发现快了很多.</p><h3 id="关掉自动编译"><a href="#关掉自动编译" class="headerlink" title="关掉自动编译"></a>关掉自动编译</h3><p>具体操作: Project -&gt; Build Automatically<br>效果: 在代码修改保存后,不会启动自动编译</p><h3 id="减少编译需要验证的项目-提升编译速度"><a href="#减少编译需要验证的项目-提升编译速度" class="headerlink" title="减少编译需要验证的项目,提升编译速度"></a>减少编译需要验证的项目,提升编译速度</h3><p>具体操作: 在Preferences -&gt; Validataion 将无关的Validator去掉, 比如: 我就将和我无关的JPA, JSP, WS 都去掉了<br>效果: 编译项目时,Eclipse跑的Validator项目少了, 确实快了</p><h3 id="配置eclipse-ini"><a href="#配置eclipse-ini" class="headerlink" title="配置eclipse.ini"></a>配置eclipse.ini</h3><pre><code>-XX:MaxPermSize=768m-Xms1024m-Xmx3072m</code></pre><h1 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h1><p>这里我们介绍一个软件:XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0002.png" alt="cmd-markdown-logo"></p><p>这里我们搭建一个bdf3数据库。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0003.png" alt="cmd-markdown-logo"></p>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
            <tag> BDF3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列之框架篇:2.搭建BDF3框架</title>
      <link href="/2018/09/12/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-da-jian-bdf3-kuang-jia/"/>
      <url>/2018/09/12/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-da-jian-bdf3-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="BDF3介绍"><a href="#BDF3介绍" class="headerlink" title="BDF3介绍"></a>BDF3介绍</h1><p>引用BDF3的GitHub的介绍:</p><pre><code>bdf3基于spring-boot研发的开发框架。包含用户、角色、菜单、权限（最小粒度为组件）、数据导入、字典、日志、实时通讯、公众号、微程序、云数据库、个人中心、云数据源、用户个性化和一个或多个数据库实例的独立数据库模式的多租户功能模块。功能模块化，自动化，参考spring boot项目结构构建，提供一些列预定义依赖项目快。基于bdf3快速开发企业管理系统。</code></pre><p>分享一下<a href="https://github.com/muxiangqiu/bdf3" target="_blank" rel="noopener">BDF3的GitHub地址</a>。</p><p>我们在BDF3的GitHub地址的页面上找到对应的示例下载，然后使用Maven导入到Eclipse中。</p><h1 id="BDF3目录结构"><a href="#BDF3目录结构" class="headerlink" title="BDF3目录结构"></a>BDF3目录结构</h1><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0001.png" alt="cmd-markdown-logo"></p><h1 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h1><p>这个时候我们需要修改一下application.properties这个配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#服务器端口设置</span><span class="token attr-name">server.port</span> <span class="token punctuation">=</span> <span class="token attr-value">8080</span><span class="token comment" spellcheck="true">#项目路径</span><span class="token attr-name">server.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/bdf</span><span class="token comment" spellcheck="true">#是否打印sql语句</span><span class="token attr-name">spring.jpa.showSql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#hibernate反向创建表设置，update启动时更新表结构，create 启动时重新创建表结构，none 启动时不检查</span><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token attr-value">update</span><span class="token comment" spellcheck="true">#springboot热部署设置，添加文件改动不重启目录。</span><span class="token attr-name">spring.devtools.restart.additional-exclude</span><span class="token punctuation">=</span><span class="token attr-value">com/**</span><span class="token comment" spellcheck="true">#数据库脚本的编码设置为UTF-8</span><span class="token attr-name">spring.datasource.sql-script-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true">#数据源配置，pom中需要引入对应的数据库jdbc依赖</span><span class="token attr-name">spring.datasource.continue-on-error</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/bdf3</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token comment" spellcheck="true">#如果数据库为非嵌入式数据库，这个属性第一次启动的时候一定要设置为ALWAYS，用于初始化数据，初始化好后，可以关闭，也可以不关闭，有自己决定</span><span class="token attr-name">spring.datasource.initialization-mode</span><span class="token punctuation">=</span><span class="token attr-value">ALWAYS</span></code></pre><h1 id="修改项目的Java为JDK"><a href="#修改项目的Java为JDK" class="headerlink" title="修改项目的Java为JDK"></a>修改项目的Java为JDK</h1><p>选中项目-&gt;右击在菜单中选择Properties-&gt;Java Build Path-&gt;Libraries-&gt;选中JRE-&gt;点击右侧的Edit-&gt;修改成JDK</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0005.png" alt="cmd-markdown-logo"></p><p>现在我们跑一下项目，找到Spring Boot的启动类SampleApplication选择main方法运行。</p><p>跑了一会之后发现报错：</p><pre><code>Cannot load driver class: com.mysql.jdbc.Driver无法加载驱动程序类:com.mysql.jdbc.Driver</code></pre><p>我们看一下pom.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 继承的父项目 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bstek.bdf3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bdf3-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bdf3-sample<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- bdf3预定义依赖，简化依赖的复杂度 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bstek.bdf3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bdf3-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;dependency>            &lt;groupId>org.springframework.boot&lt;/groupId>            &lt;artifactId>spring-boot-starter-data-redis&lt;/artifactId>        &lt;/dependency> --></span>        <span class="token comment" spellcheck="true">&lt;!-- 开发测试工具 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-devtools&lt;/artifactId>             &lt;scope>provided&lt;/scope> &lt;/dependency> --></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库驱动 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;dependency>            &lt;groupId>mysql&lt;/groupId>            &lt;artifactId>mysql-connector-java&lt;/artifactId>        &lt;/dependency> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- bdf3项目jar存放的maven私服 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>bsdn-maven-repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://nexus.bsdn.org/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>原来是数据库驱动的包没有加载，这里我们把数据库驱动的注释去除掉。重新编译一下，等包下载好之后重新运行一下。</p><pre><code> *  * ======================== *  * WARN: * Dorado is currently running in debug mode, you may need to change the setting for &quot;core.runMode&quot;. *  * ======================== * </code></pre><p>这时看到控制台出现这个就表示我们已经顺利的启动起来了。我们去数据库查看就能发现数据库已经生成了对应的表。</p><pre class=" language-sql"><code class="language-sql">bdf3_comp_cfgbdf3_comp_membbdf3_componentbdf3_dictionary <span class="token comment" spellcheck="true">-------------数据字典表</span>bdf3_dictionary_itembdf3_entrybdf3_groupbdf3_group_memberbdf3_group_templatebdf3_importer_solutionbdf3_log_info <span class="token comment" spellcheck="true">-------------登录日志表</span>bdf3_mapping_rulebdf3_member_noticebdf3_noticebdf3_permissionbdf3_profilebdf3_role <span class="token comment" spellcheck="true">-------------角色表</span>bdf3_role_granted_authoritybdf3_templatebdf3_url <span class="token comment" spellcheck="true">-------------路径表</span>bdf3_user <span class="token comment" spellcheck="true">-------------用户表</span></code></pre><p>我们打开游览器输入<a href="http://localhost:8080/bdf3.security.ui.view.Login.d" target="_blank" rel="noopener">http://localhost:8080/bdf3.security.ui.view.Login.d</a></p><p>用户名和密码在数据库的用户表中可以找到。</p><p>登录之后发现所有的中文显示的都是?，数据库的所有的中文也是同样的情况，英文和数字符号则不受影响，则说明是数据库连接的配置出现问题。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0006.png" alt="cmd-markdown-logo"></p><p>需要修改application.properties配置文件：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/bdf3?characterEncoding=utf8</span></code></pre><p>然后删除刚才错误的表数据，重新启动一遍，则恢复正常。</p><p>到这里搭建BDF3框架的基本教程就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
            <tag> BDF3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列之框架篇:3.BDF3集成Lombok</title>
      <link href="/2018/09/11/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-bdf3-ji-cheng-lombok/"/>
      <url>/2018/09/11/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-bdf3-ji-cheng-lombok/</url>
      
        <content type="html"><![CDATA[<h3 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="安装lombok插件"><a href="#安装lombok插件" class="headerlink" title="安装lombok插件"></a>安装lombok插件</h3><p>1.下载lombok.jar，lombok.jar官方下载地址：<a href="https://projectlombok.org/download" target="_blank" rel="noopener">https://projectlombok.org/download</a></p><p>2.双击下载好的lombak.jar，然后根据提示选择Eclipse安装插件。</p>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
            <tag> BDF3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列之基础篇:2.新建一个单表维护模块</title>
      <link href="/2018/09/08/dorado7/ji-chu-pian/dorado7-basic-datagrid-1/"/>
      <url>/2018/09/08/dorado7/ji-chu-pian/dorado7-basic-datagrid-1/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍在Dorado7中如何新建一个简单的单表维护模块.</p><h3 id="新建Entity"><a href="#新建Entity" class="headerlink" title="新建Entity"></a>新建Entity</h3><p>首先我们需要新建一个Entity：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 文件Entity *  * @author kangyuansheng * */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> BimsConstants<span class="token punctuation">.</span>TABLE_PREFIX <span class="token operator">+</span> <span class="token string">"file"</span> <span class="token operator">+</span> BimsConstants<span class="token punctuation">.</span>TABLE_SUFFIX<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TFileEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *      */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>324997129956689919L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id_"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file_path_"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String filePath<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件路径</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file_size_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long fileSize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件大小</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file_name_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String fileName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件名字</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file_type_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> FileFormatEnum fileType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件类型</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create_user_name_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String createUserName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建人name</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create_date_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createDate<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建时间</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"remark_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String remark<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 备注</span><span class="token punctuation">}</span></code></pre><p>然后我们跑一下项目就可以生成对应的表了。因为我们是使用Dorado JPA，它已经封装好了通用的JpaUtil，所以不需要我们再写dao了。当然你可以采用Spring Data JPA，也是支持的。</p><h3 id="新建FileService和它的实现类"><a href="#新建FileService和它的实现类" class="headerlink" title="新建FileService和它的实现类"></a>新建FileService和它的实现类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 文件Service */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"fileService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="新建视图"><a href="#新建视图" class="headerlink" title="新建视图:"></a>新建视图:</h3><p>我们新建一个file包,右击刚才新建的包-&gt;New-&gt;创建Dorado视图文件.</p><p>新建一个视图(FileView.view.xml),Dorado的视图都是这种xml文件.<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0001.png" alt="cmd-markdown-logo"></p><h3 id="新建DataType"><a href="#新建DataType" class="headerlink" title="新建DataType:"></a>新建DataType:</h3><h4 id="DataType介绍"><a href="#DataType介绍" class="headerlink" title="DataType介绍:"></a>DataType介绍:</h4><p>DataType是用来描述所有的数据类型，既包括String、int这样的简单类型，也包括数据实体这样的复杂类型。DataType分为以下三类:</p><ul><li>简单DataType，如String、int、Boolean、Date</li><li>聚合DataType，如List、Set、Array</li><li>实体DataType，如POJO Bean、Map</li></ul><p>默认提供的DataType类型的查找方式可以通过dataType属性提供的编辑框查看其base中的DataType。</p><h4 id="在视图中添加一个DataType控件"><a href="#在视图中添加一个DataType控件" class="headerlink" title="在视图中添加一个DataType控件:"></a>在视图中添加一个DataType控件:</h4><p>首先我们点击左侧的查询列表在搜索框中输入DataType.<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0002.png" alt="cmd-markdown-logo"><br>此时我们双击列表中的DataType控件就可以把DataType控件加入到我们的view视图中.</p><h4 id="为DataType控件添加具体的属性"><a href="#为DataType控件添加具体的属性" class="headerlink" title="为DataType控件添加具体的属性:"></a>为DataType控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>name</td><td style="text-align:right">数据类型的名称</td></tr><tr><td>creationType</td><td style="text-align:right">数据类型的定义/路径</td></tr></tbody></table><h4 id="为DataType控件生成PropertyDef属性"><a href="#为DataType控件生成PropertyDef属性" class="headerlink" title="为DataType控件生成PropertyDef属性:"></a>为DataType控件生成PropertyDef属性:</h4><p>利用DataType的右键向导自动生成内部的PropertyDef，当系统生成内部的PropertyDef成功之后显示为:<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0003.png" alt="cmd-markdown-logo"></p><h3 id="添加DataSet"><a href="#添加DataSet" class="headerlink" title="添加DataSet:"></a>添加DataSet:</h3><h4 id="DataSet介绍"><a href="#DataSet介绍" class="headerlink" title="DataSet介绍:"></a>DataSet介绍:</h4><p>DataSet最主要的功能就是为一份数据赋予一个名称，使这份数据可以以配置的方式被其他控件引用，以便于建立绑定关系。</p><h4 id="为DataSet控件添加具体的属性"><a href="#为DataSet控件添加具体的属性" class="headerlink" title="为DataSet控件添加具体的属性:"></a>为DataSet控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">DataSet的id</td></tr><tr><td>dataProvider</td><td style="text-align:right">根据路径找到对应的方法获取数据(BeanId#方法名)</td></tr><tr><td>dataType</td><td style="text-align:right">指定数据集的数据类型(可以指定二种形式:a.Default:对象，b.Collection:数组)</td></tr><tr><td>parameter</td><td style="text-align:right">每页显示的记录数</td></tr></tbody></table><p>配置完成之后显示如下:<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0004.png" alt="cmd-markdown-logo"></p><h4 id="修改FileService中为DataSet控件添加获取数据的java方法"><a href="#修改FileService中为DataSet控件添加获取数据的java方法" class="headerlink" title="修改FileService中为DataSet控件添加获取数据的java方法:"></a>修改FileService中为DataSet控件添加获取数据的java方法:</h4><pre class=" language-Java"><code class="language-Java">@Override@Transactional(readOnly = true)public void load(Page<TFileEntity> page, Criteria criteria) {    //根据查询条件分页查询数据    JpaUtil.linq(TFileEntity.class).where(criteria).paging(page);    Collection<TFileEntity> list = page.getEntities();    if (list == null || list.isEmpty()) {        return;    }    //java8写法:获取list集合中的所有的创建人的主键的集合    List<String> createUserKeys = list.stream().map(i -> i.getCreateUserKey()).distinct().collect(toList());    //根据用户主键的集合查询出对应的用户信息集合    List<User> userList = userService.getUserListByUserKeyList(createUserKeys);    //java8写法:将查询出来的用户信息集合按照用户主键封装成Map    Map<String, User> userMap = userList.stream().collect(toMap(User::getUsername, u -> u));    //遍历文件集合list，根据用户信息Map将每一个创建人的名称封装到集合中去    for (TFileEntity entity : list) {        if (userMap != null && userMap.containsKey(entity.getCreateUserName())) {            entity.setCreateUserName(userMap.get(entity.getCreateUserName()).getNickname());        }    }}</code></pre><p>新建Controller层：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 文件Controller */</span><span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token string">"fileController"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">protected</span> FileService fileService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 文件列表数据查询     *     * @param page     * @param criteria     */</span>    <span class="token comment" spellcheck="true">//@DataProvider注解为标识此方法为数据提供者。</span>    <span class="token annotation punctuation">@DataProvider</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getFileList</span><span class="token punctuation">(</span>Page<span class="token operator">&lt;</span>TFileEntity<span class="token operator">></span> page<span class="token punctuation">,</span> Criteria criteria<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fileService<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="添加DataGrid-数据表格控件"><a href="#添加DataGrid-数据表格控件" class="headerlink" title="添加DataGrid(数据表格控件):"></a>添加DataGrid(数据表格控件):</h3><h4 id="为DataGrid控件添加具体的属性"><a href="#为DataGrid控件添加具体的属性" class="headerlink" title="为DataGrid控件添加具体的属性:"></a>为DataGrid控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">DataGrid的id</td></tr><tr><td>dataSet</td><td style="text-align:right">数据控件绑定的数据集。</td></tr><tr><td>dataPath</td><td style="text-align:right">数据路径，用于指定数据控件与数据集中的哪些数据节点进行关联。</td></tr></tbody></table><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0005.png" alt="cmd-markdown-logo"></p><p>添加完DataGrid之后，我们需要生成一下表格需要显示的列。[右击表格]-&gt;[Generate DataColumns]即可。但是这样会根据字段生成所有的列，这时我们把不需要的列删除就ok了。</p><p>好了,我们跑一下服务器.进入页面就可以看到一个数据表格了.</p><p>但是表格中的每一列的列名都是字段名称,看上去感觉很不好.其实我们只需要通过修改文件的DataType的某个PropertyDef的label属性就可以改变它了.</p><h3 id="添加ToolBar-工具栏"><a href="#添加ToolBar-工具栏" class="headerlink" title="添加ToolBar(工具栏):"></a>添加ToolBar(工具栏):</h3><h4 id="在ToolBar控件下添加DataPilot控件"><a href="#在ToolBar控件下添加DataPilot控件" class="headerlink" title="在ToolBar控件下添加DataPilot控件:"></a>在ToolBar控件下添加DataPilot控件:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">DataGrid的id</td></tr><tr><td>dataSet</td><td style="text-align:right">数据控件绑定的数据集。</td></tr><tr><td>dataPath</td><td style="text-align:right">数据路径，用于指定数据控件与数据集中的哪些数据节点进行关联。</td></tr></tbody></table><h4 id="在ToolBar控件下添加Button-按钮-控件"><a href="#在ToolBar控件下添加Button-按钮-控件" class="headerlink" title="在ToolBar控件下添加Button(按钮)控件:"></a>在ToolBar控件下添加Button(按钮)控件:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">Button的id</td></tr><tr><td>caption</td><td style="text-align:right">按钮的标题。</td></tr><tr><td>icon</td><td style="text-align:right">图标所在路径。</td></tr></tbody></table><h4 id="添加该视图的js文件"><a href="#添加该视图的js文件" class="headerlink" title="添加该视图的js文件:"></a>添加该视图的js文件:</h4><p>注意:这里的js名称一定要视图名称保持一直要不然程序检测不到.</p><h4 id="为Button-按钮-添加点击事件"><a href="#为Button-按钮-添加点击事件" class="headerlink" title="为Button(按钮)添加点击事件:"></a>为Button(按钮)添加点击事件:</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//@Bind #addButton.onClick</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取视图中的dataSet控件</span>    <span class="token keyword">var</span> dataSetFile <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSetFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取dataSet控件的数据集</span>    <span class="token keyword">var</span> dataFileList <span class="token operator">=</span> dataSetFile<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在dataSet数据集中新增一条记录</span>    dataFileList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//@Bind 是dorado的固定写法,#xxx 是获取view中的id为xxx的控件.onClick则是点击事件.这里想要用什么事件就写什么.</p><h3 id="添加DiaLog-对话框"><a href="#添加DiaLog-对话框" class="headerlink" title="添加DiaLog(对话框):"></a>添加DiaLog(对话框):</h3><h4 id="为DiaLog控件添加具体的属性"><a href="#为DiaLog控件添加具体的属性" class="headerlink" title="为DiaLog控件添加具体的属性:"></a>为DiaLog控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">Button的id</td></tr><tr><td>caption</td><td style="text-align:right">按钮的标题。</td></tr><tr><td>icon</td><td style="text-align:right">图标所在路径。</td></tr><tr><td>width</td><td style="text-align:right">宽度</td></tr><tr><td>height</td><td style="text-align:right">高度</td></tr></tbody></table><p>在这里不推荐把DiaLog中的标题,图标之类的属性直接在DiaLog属性面板中编写.<br>比较推荐:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 打开DiaLog */</span><span class="token keyword">function</span> <span class="token function">goDiaLog</span><span class="token punctuation">(</span>diaLog<span class="token punctuation">,</span> title<span class="token punctuation">,</span> closeable<span class="token punctuation">,</span> iconUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    diaLog<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"closeable"</span><span class="token punctuation">,</span> closeable<span class="token punctuation">)</span><span class="token punctuation">;</span>    diaLog<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"caption"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>    diaLog<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"icon"</span><span class="token punctuation">,</span> iconUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    diaLog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="DiaLog控件的方法"><a href="#DiaLog控件的方法" class="headerlink" title="DiaLog控件的方法:"></a>DiaLog控件的方法:</h4><p>close():关闭面板。<br>show():显示浮动控件。<br>hide():隐藏浮动控件。</p><p>现在我们来补全刚才的js方法.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//@Bind #addButton.onClick</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取视图中的dataSet控件</span>    <span class="token keyword">var</span> dataSetFile <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSetFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取dataSet控件的数据集</span>    <span class="token keyword">var</span> dataFileList <span class="token operator">=</span> dataSetFile<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在dataSet数据集中新增一条记录</span>    dataFileList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> diaLog <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#diaLogFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    diaLog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">goDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#diaLogFile"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"添加文件"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"url(>skin>common/icons.gif) -20px -40px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是这个时候我们看到我们的弹出窗口中什么东西也没有，这是因为我们还没有为它添加控件.</p><h3 id="添加AutoForm-表单"><a href="#添加AutoForm-表单" class="headerlink" title="添加AutoForm(表单):"></a>添加AutoForm(表单):</h3><p>AutoForm是一种容器性的控件，可以在内部添加很多子控件。一般情况下都是添加AutoFormElement控件。</p><h4 id="为AutoForm控件添加具体的属性"><a href="#为AutoForm控件添加具体的属性" class="headerlink" title="为AutoForm控件添加具体的属性:"></a>为AutoForm控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">Button的id</td></tr><tr><td>cols</td><td style="text-align:right">表单布局的分栏方式。</td></tr><tr><td>dataSet</td><td style="text-align:right">绑定的数据集。</td></tr></tbody></table><h3 id="为DiaLog控件添加Button-按钮-并且绑定具体的点击事件"><a href="#为DiaLog控件添加Button-按钮-并且绑定具体的点击事件" class="headerlink" title="为DiaLog控件添加Button(按钮)并且绑定具体的点击事件:"></a>为DiaLog控件添加Button(按钮)并且绑定具体的点击事件:</h3><p>现在我们要为这个弹出窗口添加二个按钮,一个保存，一个取消按钮.</p><h4 id="为保存按钮绑定具体的点击事件"><a href="#为保存按钮绑定具体的点击事件" class="headerlink" title="为保存按钮绑定具体的点击事件:"></a>为保存按钮绑定具体的点击事件:</h4><p>既然是保存按钮的话，我们在这里肯定是要实现保存的功能的.<br>在这里既然要实现保存功能，我们就会用到的我们的一个UpdateAction(提交控件).<br>这个UpdateAction(提交控件)要怎么用呢？<br>我们先来看它的具体的属性:</p><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">提交控件的id</td></tr><tr><td>confirmMessage</td><td style="text-align:right">当此Action将要执行之前自动提示用户进行确认操作的提示信息。如果定义了此属性，在Action将要执行之前系统会自动向用户确认是否继续执行。</td></tr><tr><td>dataSet</td><td style="text-align:right">绑定的数据集。</td></tr><tr><td>successMessage</td><td style="text-align:right">当此Action执行成功之后自动提示的信息。</td></tr><tr><td>dataResolver</td><td style="text-align:right">数据处理器。</td></tr></tbody></table><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0006.png" alt="cmd-markdown-logo"></p><p>现在我们来编写保存按钮的点击事件:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//@Bind #btnDialogSave.onClick</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> updateAction <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#updateAction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateAction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#diaLogFile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="对数据进行增删改操作"><a href="#对数据进行增删改操作" class="headerlink" title="对数据进行增删改操作"></a>对数据进行增删改操作</h3><p>要实现对数据进行增删改操作就需要在Service中添加增删改的方法,因为在Dorado中有DataSet这个数据集,在Dorado中对数据的增删改操作时候产生的数据都在这个DataSet中,它是通过状态来区分的.</p><h4 id="修改FileService中为DataSet控件添加增删改的java方法"><a href="#修改FileService中为DataSet控件添加增删改的java方法" class="headerlink" title="修改FileService中为DataSet控件添加增删改的java方法:"></a>修改FileService中为DataSet控件添加增删改的java方法:</h4><pre class=" language-Java"><code class="language-Java">/** * @param data 文件Entity * @return 文件Entity * @Description:保存文件 */@Override@Transactional(rollbackFor = Exception.class)public void saveFile(List<TFileEntity> datas) {    /**     * 保存到数据库，当保存完成之后fileEntity中的id已经存在了。     * JpaUtil是bdf3中封装的操作数据库的工具类     * save：批量智能保存数据（根据EntityState执行对应的persist、merge和remove）     * 相当于这个方法save会根据entity的状态去自动的进行增加、修改、删除操作。     */    JpaUtil.save(datas, new SmartSavePolicyAdapter() {        /**         * 新增数据之前操作方法         */        @Override        public boolean beforeInsert(SaveContext context) {            if (context.getEntity() instanceof TFileEntity) {                TFileEntity entity = context.getEntity();                //保存当前时间                entity.setCreateDate(new Date());                // 获取当前创建人                User user = ContextUtils.getLoginUser();                //保存创建人的主键                entity.setCreateUserKey(user.getUsername());            }            return true;        }    });}</code></pre><p>这里贴一下JpaUtil具体的介绍与使用方法:<a href>JpaUtil介绍与使用方法</a></p><h4 id="修改Controller层："><a href="#修改Controller层：" class="headerlink" title="修改Controller层："></a>修改Controller层：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 文件列表数据保存 * * @param page * @param criteria */</span><span class="token annotation punctuation">@DataResolver</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveFileList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>TFileEntity<span class="token operator">></span> datas<span class="token punctuation">)</span> <span class="token punctuation">{</span>    categoryService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中@DataResolver是用于声明这个Java方法为一个DataResolver方法，可以被客户端的DataResolver技术所调用.<br>而DataResolver用于将DataSet中的数据抽取出来发送到Server端，以便于Server端进行相应的处理。<br>对于修改的按钮与新增基本类似,在此就不在过多讲述了.<br>对于删除的话，比较特殊.因为删除的点击事件会调用一个新的方法.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取视图中的dataSet控件</span><span class="token keyword">var</span> dataSetFile <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSetFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取dataSet控件的数据集</span><span class="token keyword">var</span> dataFileList <span class="token operator">=</span> dataSetFile<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除当前数据Entity</span>dataFileList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>到这里表格模块已经基本完成了，这里贴一下完成之后的大致的结构。<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0007.png" alt="cmd-markdown-logo"></p><p>贴一下类似的js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 右侧表格：页面加载时规格属性显示设置 */</span><span class="token comment" spellcheck="true">// @Bind #hasAvailable.onRenderCell</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> hasAvailable <span class="token operator">=</span> arg<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"hasAvailable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arg<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"可用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        arg<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"不可用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 新增常用联系人 */</span><span class="token comment" spellcheck="true">// @Bind #buttonAdd.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> entityList <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ajaxActionGetLoginUser <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#ajaxActionGetLoginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxActionGetLoginUser<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        entityList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            createUserName <span class="token punctuation">:</span> user<span class="token punctuation">.</span>username<span class="token punctuation">,</span>            createUserNickName <span class="token punctuation">:</span> user<span class="token punctuation">.</span>nickname<span class="token punctuation">,</span>            hasAvailable <span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">goAddDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialog"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"新增常用联系人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 修改常用联系人 */</span><span class="token comment" spellcheck="true">// @Bind #buttonModify.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dataSet <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择需要修改的常用联系人记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">goModifyDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialog"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"修改常用联系人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 查看常用联系人详情 */</span><span class="token comment" spellcheck="true">// @Bind #buttonView.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dataSet <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择需要查看的常用联系人记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">goViewDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialogView"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"查看常用联系人详情"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 删除常用联系人 */</span><span class="token comment" spellcheck="true">// @Bind #buttonDelete.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dataSet <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择需要删除的常用联系人记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"是否彻底删除该常用联系人?(彻底删除肯定会导致数据出现问题)"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> entity <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 仓库弹出框:确定 */</span><span class="token comment" spellcheck="true">// @Bind #btnDialogSave.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"是否确定保存当前常用联系人?"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> entity <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"createDt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> updateAction <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#updateAction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateAction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">closeDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 仓库弹出框:取消 */</span><span class="token comment" spellcheck="true">// @Bind #btnDialogCancel.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"是否放弃操作当前常用联系人?"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> entity <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">closeDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列之基础篇:1.Dorado7介绍以及一些常用文档</title>
      <link href="/2018/09/07/dorado7/ji-chu-pian/dorado7-basic-basic/"/>
      <url>/2018/09/07/dorado7/ji-chu-pian/dorado7-basic-basic/</url>
      
        <content type="html"><![CDATA[<h3 id="1-简单介绍一下Dorado7"><a href="#1-简单介绍一下Dorado7" class="headerlink" title="1.简单介绍一下Dorado7"></a>1.简单介绍一下Dorado7</h3><p>Dorado7是<strong>源</strong>代码开放的Web<strong>表现层</strong>框架。</p><h3 id="2-Dorado7常用文档"><a href="#2-Dorado7常用文档" class="headerlink" title="2.Dorado7常用文档"></a>2.Dorado7常用文档</h3><blockquote><ul><li>Dorado7 资料库: <a href="http://wiki.bsdn.org/display/dorado7/Project+Home" target="_blank" rel="noopener">http://wiki.bsdn.org/display/dorado7/Project+Home</a> </li><li>Dorado7 API: <a href="http://www.bsdn.org/projects/dorado7/deploy/jsdoc/" target="_blank" rel="noopener">http://www.bsdn.org/projects/dorado7/deploy/jsdoc/</a></li><li>Dorado7 官方网站: <a href="http://bsdn.org/projects/dorado7" target="_blank" rel="noopener">http://bsdn.org/projects/dorado7</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列目录</title>
      <link href="/2018/09/01/dorado7/dorado7-xi-lie-mu-lu/"/>
      <url>/2018/09/01/dorado7/dorado7-xi-lie-mu-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><ol><li><a href="http://kangyuansheng.top/2018/05/17/Dorado7/BasicPaper/Dorado7-Basic-Basic/" target="_blank" rel="noopener">Dorado7系列之基础篇:1.Dorado7介绍以及一些常用文档</a></li><li><a href="http://kangyuansheng.top/2018/05/25/Dorado7/BasicPaper/Dorado7-Basic-DataGrid-1/" target="_blank" rel="noopener">Dorado7系列之基础篇:2.新建一个单表维护模块</a></li><li><a href>Dorado7系列之基础篇:3.单表维护模块优化</a> </li><li><a href>Dorado7系列之基础篇:4.递归树模块</a> </li><li><a href>Dorado7系列之基础篇:5.递归树与表格实现联动</a> </li></ol><h3 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a>框架篇</h3><ol><li><a href="http://kangyuansheng.top/2019/02/12/Dorado7/framework/Dorado7-%E6%A1%86%E6%9E%B6%E7%AF%87-%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">Dorado7系列之框架篇:1.如何搭建BDF3框架</a></li><li><a href="http://kangyuansheng.top/2019/02/12/Dorado7/framework/Dorado7-%E6%A1%86%E6%9E%B6%E7%AF%87-%E6%90%AD%E5%BB%BABDF3%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">Dorado7系列之框架篇:2.搭建BDF3框架</a></li><li><a href="http://kangyuansheng.top/2019/02/12/Dorado7/framework/Dorado7-%E6%A1%86%E6%9E%B6%E7%AF%87-BDF3%E9%9B%86%E6%88%90Lombok/" target="_blank" rel="noopener">Dorado7系列之框架篇:3.BDF3集成Lombok</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
