<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dorado7系列之框架篇:1.如何搭建BDF3框架</title>
      <link href="/2018/09/13/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-da-jian-kai-fa-huan-jing/"/>
      <url>/2018/09/13/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-da-jian-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Eclipse配置"><a href="#Eclipse配置" class="headerlink" title="Eclipse配置"></a>Eclipse配置</h1><h2 id="修改Eclipse字体大小"><a href="#修改Eclipse字体大小" class="headerlink" title="修改Eclipse字体大小"></a>修改Eclipse字体大小</h2><p>[window]-&gt;[preferences]-&gt;[General]-&gt;[Appearance]-&gt;[Colors and Fonts]-&gt;[Basic]-&gt;点击展开Basic,最下面有 Text Font 这个选项，点击，然后修改保存即可。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0004.png" alt="cmd-markdown-logo"></p><h2 id="配置Dorado7开发插件"><a href="#配置Dorado7开发插件" class="headerlink" title="配置Dorado7开发插件"></a>配置Dorado7开发插件</h2><p>首先我们需要在官方网站上下载一个最新版的Eclipse。</p><p>在Eclipse的安装文件目录中找到dropins，将Dorado7开发插件的文件夹拷贝到其中。</p><p><strong>注意：</strong></p><p>假如用Eclipse配置完Dorado7开发插件之后，打开View视图出现<strong>An error has occurred,See error log for more details</strong>报错。</p><p>解决方法：在”开始”–&gt;”运行”—-&gt;打入”cmd”进入命令提示行后,再进入eclipse的安装目录,<br>         然后输入eclipse -clean即可（我用的这个方法 成功了）</p><h2 id="配置Jetty插件"><a href="#配置Jetty插件" class="headerlink" title="配置Jetty插件"></a>配置Jetty插件</h2><p>[Help]-&gt;[Eclipse Marketplace]-&gt;在搜索条中输入Jetty点击搜索，找到Jetty插件点击<strong>Install</strong>，然后把插件安装下来就好了。(Ps:下载慢的小伙伴可以需要一个科学上网的工具。)</p><h2 id="配置JRebel插件"><a href="#配置JRebel插件" class="headerlink" title="配置JRebel插件"></a>配置JRebel插件</h2><p>我们安装完Jetty插件之后还需要安装一个插件JRebel：可快速实现热部署，节省了大量重启时间，提高了个人开发效率。</p><p>当下载完成之后需要激活一下才能使用。</p><h2 id="关于Eclipse性能优化"><a href="#关于Eclipse性能优化" class="headerlink" title="关于Eclipse性能优化"></a>关于Eclipse性能优化</h2><h3 id="减少Eclipse启动后自动启动的插件"><a href="#减少Eclipse启动后自动启动的插件" class="headerlink" title="减少Eclipse启动后自动启动的插件"></a>减少Eclipse启动后自动启动的插件</h3><p>具体操作: 在Preferences -&gt; General -&gt; StartUp and Shutdown: 将除Plug-ins activated on startup以外的项目有节选的去掉（比如Mylyn等没用到,就去掉了）<br>效果: 启动Eclipse后,会有Initialing Java Tools的滚动条,会发现快了很多.</p><h3 id="关掉自动编译"><a href="#关掉自动编译" class="headerlink" title="关掉自动编译"></a>关掉自动编译</h3><p>具体操作: Project -&gt; Build Automatically<br>效果: 在代码修改保存后,不会启动自动编译</p><h3 id="减少编译需要验证的项目-提升编译速度"><a href="#减少编译需要验证的项目-提升编译速度" class="headerlink" title="减少编译需要验证的项目,提升编译速度"></a>减少编译需要验证的项目,提升编译速度</h3><p>具体操作: 在Preferences -&gt; Validataion 将无关的Validator去掉, 比如: 我就将和我无关的JPA, JSP, WS 都去掉了<br>效果: 编译项目时,Eclipse跑的Validator项目少了, 确实快了</p><h3 id="配置eclipse-ini"><a href="#配置eclipse-ini" class="headerlink" title="配置eclipse.ini"></a>配置eclipse.ini</h3><pre><code>-XX:MaxPermSize=768m-Xms1024m-Xmx3072m</code></pre><h1 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h1><p>这里我们介绍一个软件:XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0002.png" alt="cmd-markdown-logo"></p><p>这里我们搭建一个bdf3数据库。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0003.png" alt="cmd-markdown-logo"></p>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
            <tag> BDF3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列之框架篇:2.搭建BDF3框架</title>
      <link href="/2018/09/12/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-da-jian-bdf3-kuang-jia/"/>
      <url>/2018/09/12/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-da-jian-bdf3-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="BDF3介绍"><a href="#BDF3介绍" class="headerlink" title="BDF3介绍"></a>BDF3介绍</h1><p>引用BDF3的GitHub的介绍:</p><pre><code>bdf3基于spring-boot研发的开发框架。包含用户、角色、菜单、权限（最小粒度为组件）、数据导入、字典、日志、实时通讯、公众号、微程序、云数据库、个人中心、云数据源、用户个性化和一个或多个数据库实例的独立数据库模式的多租户功能模块。功能模块化，自动化，参考spring boot项目结构构建，提供一些列预定义依赖项目快。基于bdf3快速开发企业管理系统。</code></pre><p>分享一下<a href="https://github.com/muxiangqiu/bdf3" target="_blank" rel="noopener">BDF3的GitHub地址</a>。</p><p>我们在BDF3的GitHub地址的页面上找到对应的示例下载，然后使用Maven导入到Eclipse中。</p><h1 id="BDF3目录结构"><a href="#BDF3目录结构" class="headerlink" title="BDF3目录结构"></a>BDF3目录结构</h1><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0001.png" alt="cmd-markdown-logo"></p><h1 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h1><p>这个时候我们需要修改一下application.properties这个配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#服务器端口设置</span><span class="token attr-name">server.port</span> <span class="token punctuation">=</span> <span class="token attr-value">8080</span><span class="token comment" spellcheck="true">#项目路径</span><span class="token attr-name">server.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/bdf</span><span class="token comment" spellcheck="true">#是否打印sql语句</span><span class="token attr-name">spring.jpa.showSql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#hibernate反向创建表设置，update启动时更新表结构，create 启动时重新创建表结构，none 启动时不检查</span><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token attr-value">update</span><span class="token comment" spellcheck="true">#springboot热部署设置，添加文件改动不重启目录。</span><span class="token attr-name">spring.devtools.restart.additional-exclude</span><span class="token punctuation">=</span><span class="token attr-value">com/**</span><span class="token comment" spellcheck="true">#数据库脚本的编码设置为UTF-8</span><span class="token attr-name">spring.datasource.sql-script-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true">#数据源配置，pom中需要引入对应的数据库jdbc依赖</span><span class="token attr-name">spring.datasource.continue-on-error</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/bdf3</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token comment" spellcheck="true">#如果数据库为非嵌入式数据库，这个属性第一次启动的时候一定要设置为ALWAYS，用于初始化数据，初始化好后，可以关闭，也可以不关闭，有自己决定</span><span class="token attr-name">spring.datasource.initialization-mode</span><span class="token punctuation">=</span><span class="token attr-value">ALWAYS</span></code></pre><h1 id="修改项目的Java为JDK"><a href="#修改项目的Java为JDK" class="headerlink" title="修改项目的Java为JDK"></a>修改项目的Java为JDK</h1><p>选中项目-&gt;右击在菜单中选择Properties-&gt;Java Build Path-&gt;Libraries-&gt;选中JRE-&gt;点击右侧的Edit-&gt;修改成JDK</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0005.png" alt="cmd-markdown-logo"></p><p>现在我们跑一下项目，找到Spring Boot的启动类SampleApplication选择main方法运行。</p><p>跑了一会之后发现报错：</p><pre><code>Cannot load driver class: com.mysql.jdbc.Driver无法加载驱动程序类:com.mysql.jdbc.Driver</code></pre><p>我们看一下pom.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 继承的父项目 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bstek.bdf3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bdf3-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bdf3-sample<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- bdf3预定义依赖，简化依赖的复杂度 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bstek.bdf3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bdf3-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;dependency>            &lt;groupId>org.springframework.boot&lt;/groupId>            &lt;artifactId>spring-boot-starter-data-redis&lt;/artifactId>        &lt;/dependency> --></span>        <span class="token comment" spellcheck="true">&lt;!-- 开发测试工具 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-devtools&lt;/artifactId>             &lt;scope>provided&lt;/scope> &lt;/dependency> --></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库驱动 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;dependency>            &lt;groupId>mysql&lt;/groupId>            &lt;artifactId>mysql-connector-java&lt;/artifactId>        &lt;/dependency> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- bdf3项目jar存放的maven私服 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>bsdn-maven-repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://nexus.bsdn.org/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>原来是数据库驱动的包没有加载，这里我们把数据库驱动的注释去除掉。重新编译一下，等包下载好之后重新运行一下。</p><pre><code> *  * ======================== *  * WARN: * Dorado is currently running in debug mode, you may need to change the setting for &quot;core.runMode&quot;. *  * ======================== * </code></pre><p>这时看到控制台出现这个就表示我们已经顺利的启动起来了。我们去数据库查看就能发现数据库已经生成了对应的表。</p><pre class=" language-sql"><code class="language-sql">bdf3_comp_cfgbdf3_comp_membbdf3_componentbdf3_dictionary <span class="token comment" spellcheck="true">-------------数据字典表</span>bdf3_dictionary_itembdf3_entrybdf3_groupbdf3_group_memberbdf3_group_templatebdf3_importer_solutionbdf3_log_info <span class="token comment" spellcheck="true">-------------登录日志表</span>bdf3_mapping_rulebdf3_member_noticebdf3_noticebdf3_permissionbdf3_profilebdf3_role <span class="token comment" spellcheck="true">-------------角色表</span>bdf3_role_granted_authoritybdf3_templatebdf3_url <span class="token comment" spellcheck="true">-------------路径表</span>bdf3_user <span class="token comment" spellcheck="true">-------------用户表</span></code></pre><p>我们打开游览器输入<a href="http://localhost:8080/bdf3.security.ui.view.Login.d" target="_blank" rel="noopener">http://localhost:8080/bdf3.security.ui.view.Login.d</a></p><p>用户名和密码在数据库的用户表中可以找到。</p><p>登录之后发现所有的中文显示的都是?，数据库的所有的中文也是同样的情况，英文和数字符号则不受影响，则说明是数据库连接的配置出现问题。</p><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Framework-Paper/Dorado7-framework-0006.png" alt="cmd-markdown-logo"></p><p>需要修改application.properties配置文件：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/bdf3?characterEncoding=utf8</span></code></pre><p>然后删除刚才错误的表数据，重新启动一遍，则恢复正常。</p><p>到这里搭建BDF3框架的基本教程就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
            <tag> BDF3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列之框架篇:3.BDF3集成Lombok</title>
      <link href="/2018/09/11/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-bdf3-ji-cheng-lombok/"/>
      <url>/2018/09/11/dorado7/kuang-jia-pian/dorado7-kuang-jia-pian-bdf3-ji-cheng-lombok/</url>
      
        <content type="html"><![CDATA[<h3 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="安装lombok插件"><a href="#安装lombok插件" class="headerlink" title="安装lombok插件"></a>安装lombok插件</h3><p>1.下载lombok.jar，lombok.jar官方下载地址：<a href="https://projectlombok.org/download" target="_blank" rel="noopener">https://projectlombok.org/download</a></p><p>2.双击下载好的lombak.jar，然后根据提示选择Eclipse安装插件。</p>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
            <tag> BDF3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列之基础篇:2.新建一个单表维护模块</title>
      <link href="/2018/09/08/dorado7/ji-chu-pian/dorado7-basic-datagrid-1/"/>
      <url>/2018/09/08/dorado7/ji-chu-pian/dorado7-basic-datagrid-1/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍在Dorado7中如何新建一个简单的单表维护模块.</p><h3 id="新建Entity"><a href="#新建Entity" class="headerlink" title="新建Entity"></a>新建Entity</h3><p>首先我们需要新建一个Entity：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 文件Entity *  * @author kangyuansheng * */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> BimsConstants<span class="token punctuation">.</span>TABLE_PREFIX <span class="token operator">+</span> <span class="token string">"file"</span> <span class="token operator">+</span> BimsConstants<span class="token punctuation">.</span>TABLE_SUFFIX<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TFileEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *      */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>324997129956689919L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id_"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file_path_"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String filePath<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件路径</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file_size_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long fileSize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件大小</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file_name_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String fileName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件名字</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file_type_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> FileFormatEnum fileType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件类型</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create_user_name_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String createUserName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建人name</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create_date_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createDate<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建时间</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"remark_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String remark<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 备注</span><span class="token punctuation">}</span></code></pre><p>然后我们跑一下项目就可以生成对应的表了。因为我们是使用Dorado JPA，它已经封装好了通用的JpaUtil，所以不需要我们再写dao了。当然你可以采用Spring Data JPA，也是支持的。</p><h3 id="新建FileService和它的实现类"><a href="#新建FileService和它的实现类" class="headerlink" title="新建FileService和它的实现类"></a>新建FileService和它的实现类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 文件Service */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"fileService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="新建视图"><a href="#新建视图" class="headerlink" title="新建视图:"></a>新建视图:</h3><p>我们新建一个file包,右击刚才新建的包-&gt;New-&gt;创建Dorado视图文件.</p><p>新建一个视图(FileView.view.xml),Dorado的视图都是这种xml文件.<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0001.png" alt="cmd-markdown-logo"></p><h3 id="新建DataType"><a href="#新建DataType" class="headerlink" title="新建DataType:"></a>新建DataType:</h3><h4 id="DataType介绍"><a href="#DataType介绍" class="headerlink" title="DataType介绍:"></a>DataType介绍:</h4><p>DataType是用来描述所有的数据类型，既包括String、int这样的简单类型，也包括数据实体这样的复杂类型。DataType分为以下三类:</p><ul><li>简单DataType，如String、int、Boolean、Date</li><li>聚合DataType，如List、Set、Array</li><li>实体DataType，如POJO Bean、Map</li></ul><p>默认提供的DataType类型的查找方式可以通过dataType属性提供的编辑框查看其base中的DataType。</p><h4 id="在视图中添加一个DataType控件"><a href="#在视图中添加一个DataType控件" class="headerlink" title="在视图中添加一个DataType控件:"></a>在视图中添加一个DataType控件:</h4><p>首先我们点击左侧的查询列表在搜索框中输入DataType.<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0002.png" alt="cmd-markdown-logo"><br>此时我们双击列表中的DataType控件就可以把DataType控件加入到我们的view视图中.</p><h4 id="为DataType控件添加具体的属性"><a href="#为DataType控件添加具体的属性" class="headerlink" title="为DataType控件添加具体的属性:"></a>为DataType控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>name</td><td style="text-align:right">数据类型的名称</td></tr><tr><td>creationType</td><td style="text-align:right">数据类型的定义/路径</td></tr></tbody></table><h4 id="为DataType控件生成PropertyDef属性"><a href="#为DataType控件生成PropertyDef属性" class="headerlink" title="为DataType控件生成PropertyDef属性:"></a>为DataType控件生成PropertyDef属性:</h4><p>利用DataType的右键向导自动生成内部的PropertyDef，当系统生成内部的PropertyDef成功之后显示为:<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0003.png" alt="cmd-markdown-logo"></p><h3 id="添加DataSet"><a href="#添加DataSet" class="headerlink" title="添加DataSet:"></a>添加DataSet:</h3><h4 id="DataSet介绍"><a href="#DataSet介绍" class="headerlink" title="DataSet介绍:"></a>DataSet介绍:</h4><p>DataSet最主要的功能就是为一份数据赋予一个名称，使这份数据可以以配置的方式被其他控件引用，以便于建立绑定关系。</p><h4 id="为DataSet控件添加具体的属性"><a href="#为DataSet控件添加具体的属性" class="headerlink" title="为DataSet控件添加具体的属性:"></a>为DataSet控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">DataSet的id</td></tr><tr><td>dataProvider</td><td style="text-align:right">根据路径找到对应的方法获取数据(BeanId#方法名)</td></tr><tr><td>dataType</td><td style="text-align:right">指定数据集的数据类型(可以指定二种形式:a.Default:对象，b.Collection:数组)</td></tr><tr><td>parameter</td><td style="text-align:right">每页显示的记录数</td></tr></tbody></table><p>配置完成之后显示如下:<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0004.png" alt="cmd-markdown-logo"></p><h4 id="修改FileService中为DataSet控件添加获取数据的java方法"><a href="#修改FileService中为DataSet控件添加获取数据的java方法" class="headerlink" title="修改FileService中为DataSet控件添加获取数据的java方法:"></a>修改FileService中为DataSet控件添加获取数据的java方法:</h4><pre class=" language-Java"><code class="language-Java">@Override@Transactional(readOnly = true)public void load(Page<TFileEntity> page, Criteria criteria) {    //根据查询条件分页查询数据    JpaUtil.linq(TFileEntity.class).where(criteria).paging(page);    Collection<TFileEntity> list = page.getEntities();    if (list == null || list.isEmpty()) {        return;    }    //java8写法:获取list集合中的所有的创建人的主键的集合    List<String> createUserKeys = list.stream().map(i -> i.getCreateUserKey()).distinct().collect(toList());    //根据用户主键的集合查询出对应的用户信息集合    List<User> userList = userService.getUserListByUserKeyList(createUserKeys);    //java8写法:将查询出来的用户信息集合按照用户主键封装成Map    Map<String, User> userMap = userList.stream().collect(toMap(User::getUsername, u -> u));    //遍历文件集合list，根据用户信息Map将每一个创建人的名称封装到集合中去    for (TFileEntity entity : list) {        if (userMap != null && userMap.containsKey(entity.getCreateUserName())) {            entity.setCreateUserName(userMap.get(entity.getCreateUserName()).getNickname());        }    }}</code></pre><p>新建Controller层：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 文件Controller */</span><span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token string">"fileController"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">protected</span> FileService fileService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 文件列表数据查询     *     * @param page     * @param criteria     */</span>    <span class="token comment" spellcheck="true">//@DataProvider注解为标识此方法为数据提供者。</span>    <span class="token annotation punctuation">@DataProvider</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getFileList</span><span class="token punctuation">(</span>Page<span class="token operator">&lt;</span>TFileEntity<span class="token operator">></span> page<span class="token punctuation">,</span> Criteria criteria<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fileService<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="添加DataGrid-数据表格控件"><a href="#添加DataGrid-数据表格控件" class="headerlink" title="添加DataGrid(数据表格控件):"></a>添加DataGrid(数据表格控件):</h3><h4 id="为DataGrid控件添加具体的属性"><a href="#为DataGrid控件添加具体的属性" class="headerlink" title="为DataGrid控件添加具体的属性:"></a>为DataGrid控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">DataGrid的id</td></tr><tr><td>dataSet</td><td style="text-align:right">数据控件绑定的数据集。</td></tr><tr><td>dataPath</td><td style="text-align:right">数据路径，用于指定数据控件与数据集中的哪些数据节点进行关联。</td></tr></tbody></table><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0005.png" alt="cmd-markdown-logo"></p><p>添加完DataGrid之后，我们需要生成一下表格需要显示的列。[右击表格]-&gt;[Generate DataColumns]即可。但是这样会根据字段生成所有的列，这时我们把不需要的列删除就ok了。</p><p>好了,我们跑一下服务器.进入页面就可以看到一个数据表格了.</p><p>但是表格中的每一列的列名都是字段名称,看上去感觉很不好.其实我们只需要通过修改文件的DataType的某个PropertyDef的label属性就可以改变它了.</p><h3 id="添加ToolBar-工具栏"><a href="#添加ToolBar-工具栏" class="headerlink" title="添加ToolBar(工具栏):"></a>添加ToolBar(工具栏):</h3><h4 id="在ToolBar控件下添加DataPilot控件"><a href="#在ToolBar控件下添加DataPilot控件" class="headerlink" title="在ToolBar控件下添加DataPilot控件:"></a>在ToolBar控件下添加DataPilot控件:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">DataGrid的id</td></tr><tr><td>dataSet</td><td style="text-align:right">数据控件绑定的数据集。</td></tr><tr><td>dataPath</td><td style="text-align:right">数据路径，用于指定数据控件与数据集中的哪些数据节点进行关联。</td></tr></tbody></table><h4 id="在ToolBar控件下添加Button-按钮-控件"><a href="#在ToolBar控件下添加Button-按钮-控件" class="headerlink" title="在ToolBar控件下添加Button(按钮)控件:"></a>在ToolBar控件下添加Button(按钮)控件:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">Button的id</td></tr><tr><td>caption</td><td style="text-align:right">按钮的标题。</td></tr><tr><td>icon</td><td style="text-align:right">图标所在路径。</td></tr></tbody></table><h4 id="添加该视图的js文件"><a href="#添加该视图的js文件" class="headerlink" title="添加该视图的js文件:"></a>添加该视图的js文件:</h4><p>注意:这里的js名称一定要视图名称保持一直要不然程序检测不到.</p><h4 id="为Button-按钮-添加点击事件"><a href="#为Button-按钮-添加点击事件" class="headerlink" title="为Button(按钮)添加点击事件:"></a>为Button(按钮)添加点击事件:</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//@Bind #addButton.onClick</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取视图中的dataSet控件</span>    <span class="token keyword">var</span> dataSetFile <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSetFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取dataSet控件的数据集</span>    <span class="token keyword">var</span> dataFileList <span class="token operator">=</span> dataSetFile<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在dataSet数据集中新增一条记录</span>    dataFileList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>//@Bind 是dorado的固定写法,#xxx 是获取view中的id为xxx的控件.onClick则是点击事件.这里想要用什么事件就写什么.</p><h3 id="添加DiaLog-对话框"><a href="#添加DiaLog-对话框" class="headerlink" title="添加DiaLog(对话框):"></a>添加DiaLog(对话框):</h3><h4 id="为DiaLog控件添加具体的属性"><a href="#为DiaLog控件添加具体的属性" class="headerlink" title="为DiaLog控件添加具体的属性:"></a>为DiaLog控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">Button的id</td></tr><tr><td>caption</td><td style="text-align:right">按钮的标题。</td></tr><tr><td>icon</td><td style="text-align:right">图标所在路径。</td></tr><tr><td>width</td><td style="text-align:right">宽度</td></tr><tr><td>height</td><td style="text-align:right">高度</td></tr></tbody></table><p>在这里不推荐把DiaLog中的标题,图标之类的属性直接在DiaLog属性面板中编写.<br>比较推荐:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 打开DiaLog */</span><span class="token keyword">function</span> <span class="token function">goDiaLog</span><span class="token punctuation">(</span>diaLog<span class="token punctuation">,</span> title<span class="token punctuation">,</span> closeable<span class="token punctuation">,</span> iconUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    diaLog<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"closeable"</span><span class="token punctuation">,</span> closeable<span class="token punctuation">)</span><span class="token punctuation">;</span>    diaLog<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"caption"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>    diaLog<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"icon"</span><span class="token punctuation">,</span> iconUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    diaLog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="DiaLog控件的方法"><a href="#DiaLog控件的方法" class="headerlink" title="DiaLog控件的方法:"></a>DiaLog控件的方法:</h4><p>close():关闭面板。<br>show():显示浮动控件。<br>hide():隐藏浮动控件。</p><p>现在我们来补全刚才的js方法.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//@Bind #addButton.onClick</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取视图中的dataSet控件</span>    <span class="token keyword">var</span> dataSetFile <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSetFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取dataSet控件的数据集</span>    <span class="token keyword">var</span> dataFileList <span class="token operator">=</span> dataSetFile<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在dataSet数据集中新增一条记录</span>    dataFileList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> diaLog <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#diaLogFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    diaLog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">goDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#diaLogFile"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"添加文件"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"url(>skin>common/icons.gif) -20px -40px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是这个时候我们看到我们的弹出窗口中什么东西也没有，这是因为我们还没有为它添加控件.</p><h3 id="添加AutoForm-表单"><a href="#添加AutoForm-表单" class="headerlink" title="添加AutoForm(表单):"></a>添加AutoForm(表单):</h3><p>AutoForm是一种容器性的控件，可以在内部添加很多子控件。一般情况下都是添加AutoFormElement控件。</p><h4 id="为AutoForm控件添加具体的属性"><a href="#为AutoForm控件添加具体的属性" class="headerlink" title="为AutoForm控件添加具体的属性:"></a>为AutoForm控件添加具体的属性:</h4><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">Button的id</td></tr><tr><td>cols</td><td style="text-align:right">表单布局的分栏方式。</td></tr><tr><td>dataSet</td><td style="text-align:right">绑定的数据集。</td></tr></tbody></table><h3 id="为DiaLog控件添加Button-按钮-并且绑定具体的点击事件"><a href="#为DiaLog控件添加Button-按钮-并且绑定具体的点击事件" class="headerlink" title="为DiaLog控件添加Button(按钮)并且绑定具体的点击事件:"></a>为DiaLog控件添加Button(按钮)并且绑定具体的点击事件:</h3><p>现在我们要为这个弹出窗口添加二个按钮,一个保存，一个取消按钮.</p><h4 id="为保存按钮绑定具体的点击事件"><a href="#为保存按钮绑定具体的点击事件" class="headerlink" title="为保存按钮绑定具体的点击事件:"></a>为保存按钮绑定具体的点击事件:</h4><p>既然是保存按钮的话，我们在这里肯定是要实现保存的功能的.<br>在这里既然要实现保存功能，我们就会用到的我们的一个UpdateAction(提交控件).<br>这个UpdateAction(提交控件)要怎么用呢？<br>我们先来看它的具体的属性:</p><table><thead><tr><th>字段名</th><th style="text-align:right">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">提交控件的id</td></tr><tr><td>confirmMessage</td><td style="text-align:right">当此Action将要执行之前自动提示用户进行确认操作的提示信息。如果定义了此属性，在Action将要执行之前系统会自动向用户确认是否继续执行。</td></tr><tr><td>dataSet</td><td style="text-align:right">绑定的数据集。</td></tr><tr><td>successMessage</td><td style="text-align:right">当此Action执行成功之后自动提示的信息。</td></tr><tr><td>dataResolver</td><td style="text-align:right">数据处理器。</td></tr></tbody></table><p><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0006.png" alt="cmd-markdown-logo"></p><p>现在我们来编写保存按钮的点击事件:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//@Bind #btnDialogSave.onClick</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> updateAction <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#updateAction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateAction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#diaLogFile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="对数据进行增删改操作"><a href="#对数据进行增删改操作" class="headerlink" title="对数据进行增删改操作"></a>对数据进行增删改操作</h3><p>要实现对数据进行增删改操作就需要在Service中添加增删改的方法,因为在Dorado中有DataSet这个数据集,在Dorado中对数据的增删改操作时候产生的数据都在这个DataSet中,它是通过状态来区分的.</p><h4 id="修改FileService中为DataSet控件添加增删改的java方法"><a href="#修改FileService中为DataSet控件添加增删改的java方法" class="headerlink" title="修改FileService中为DataSet控件添加增删改的java方法:"></a>修改FileService中为DataSet控件添加增删改的java方法:</h4><pre class=" language-Java"><code class="language-Java">/** * @param data 文件Entity * @return 文件Entity * @Description:保存文件 */@Override@Transactional(rollbackFor = Exception.class)public void saveFile(List<TFileEntity> datas) {    /**     * 保存到数据库，当保存完成之后fileEntity中的id已经存在了。     * JpaUtil是bdf3中封装的操作数据库的工具类     * save：批量智能保存数据（根据EntityState执行对应的persist、merge和remove）     * 相当于这个方法save会根据entity的状态去自动的进行增加、修改、删除操作。     */    JpaUtil.save(datas, new SmartSavePolicyAdapter() {        /**         * 新增数据之前操作方法         */        @Override        public boolean beforeInsert(SaveContext context) {            if (context.getEntity() instanceof TFileEntity) {                TFileEntity entity = context.getEntity();                //保存当前时间                entity.setCreateDate(new Date());                // 获取当前创建人                User user = ContextUtils.getLoginUser();                //保存创建人的主键                entity.setCreateUserKey(user.getUsername());            }            return true;        }    });}</code></pre><p>这里贴一下JpaUtil具体的介绍与使用方法:<a href>JpaUtil介绍与使用方法</a></p><h4 id="修改Controller层："><a href="#修改Controller层：" class="headerlink" title="修改Controller层："></a>修改Controller层：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 文件列表数据保存 * * @param page * @param criteria */</span><span class="token annotation punctuation">@DataResolver</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveFileList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>TFileEntity<span class="token operator">></span> datas<span class="token punctuation">)</span> <span class="token punctuation">{</span>    categoryService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中@DataResolver是用于声明这个Java方法为一个DataResolver方法，可以被客户端的DataResolver技术所调用.<br>而DataResolver用于将DataSet中的数据抽取出来发送到Server端，以便于Server端进行相应的处理。<br>对于修改的按钮与新增基本类似,在此就不在过多讲述了.<br>对于删除的话，比较特殊.因为删除的点击事件会调用一个新的方法.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取视图中的dataSet控件</span><span class="token keyword">var</span> dataSetFile <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSetFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取dataSet控件的数据集</span><span class="token keyword">var</span> dataFileList <span class="token operator">=</span> dataSetFile<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除当前数据Entity</span>dataFileList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>到这里表格模块已经基本完成了，这里贴一下完成之后的大致的结构。<br><img src="http://kyshblogs.oss-cn-beijing.aliyuncs.com/Dorado7/Basic-Paper/Dorado7-BasicPaper-0007.png" alt="cmd-markdown-logo"></p><p>贴一下类似的js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 右侧表格：页面加载时规格属性显示设置 */</span><span class="token comment" spellcheck="true">// @Bind #hasAvailable.onRenderCell</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> hasAvailable <span class="token operator">=</span> arg<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"hasAvailable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arg<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"可用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        arg<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"不可用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 新增常用联系人 */</span><span class="token comment" spellcheck="true">// @Bind #buttonAdd.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> entityList <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ajaxActionGetLoginUser <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#ajaxActionGetLoginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ajaxActionGetLoginUser<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        entityList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            createUserName <span class="token punctuation">:</span> user<span class="token punctuation">.</span>username<span class="token punctuation">,</span>            createUserNickName <span class="token punctuation">:</span> user<span class="token punctuation">.</span>nickname<span class="token punctuation">,</span>            hasAvailable <span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">goAddDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialog"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"新增常用联系人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 修改常用联系人 */</span><span class="token comment" spellcheck="true">// @Bind #buttonModify.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dataSet <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择需要修改的常用联系人记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">goModifyDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialog"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"修改常用联系人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 查看常用联系人详情 */</span><span class="token comment" spellcheck="true">// @Bind #buttonView.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dataSet <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择需要查看的常用联系人记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">goViewDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialogView"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"查看常用联系人详情"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 删除常用联系人 */</span><span class="token comment" spellcheck="true">// @Bind #buttonDelete.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dataSet <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择需要删除的常用联系人记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"是否彻底删除该常用联系人?(彻底删除肯定会导致数据出现问题)"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> entity <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 仓库弹出框:确定 */</span><span class="token comment" spellcheck="true">// @Bind #btnDialogSave.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"是否确定保存当前常用联系人?"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> entity <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"createDt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> updateAction <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#updateAction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateAction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">closeDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 仓库弹出框:取消 */</span><span class="token comment" spellcheck="true">// @Bind #btnDialogCancel.onClick</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dorado<span class="token punctuation">.</span>MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"是否放弃操作当前常用联系人?"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> entity <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dataSet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">closeDiaLog</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"#dialog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列之基础篇:1.Dorado7介绍以及一些常用文档</title>
      <link href="/2018/09/07/dorado7/ji-chu-pian/dorado7-basic-basic/"/>
      <url>/2018/09/07/dorado7/ji-chu-pian/dorado7-basic-basic/</url>
      
        <content type="html"><![CDATA[<h3 id="1-简单介绍一下Dorado7"><a href="#1-简单介绍一下Dorado7" class="headerlink" title="1.简单介绍一下Dorado7"></a>1.简单介绍一下Dorado7</h3><p>Dorado7是<strong>源</strong>代码开放的Web<strong>表现层</strong>框架。</p><h3 id="2-Dorado7常用文档"><a href="#2-Dorado7常用文档" class="headerlink" title="2.Dorado7常用文档"></a>2.Dorado7常用文档</h3><blockquote><ul><li>Dorado7 资料库: <a href="http://wiki.bsdn.org/display/dorado7/Project+Home" target="_blank" rel="noopener">http://wiki.bsdn.org/display/dorado7/Project+Home</a> </li><li>Dorado7 API: <a href="http://www.bsdn.org/projects/dorado7/deploy/jsdoc/" target="_blank" rel="noopener">http://www.bsdn.org/projects/dorado7/deploy/jsdoc/</a></li><li>Dorado7 官方网站: <a href="http://bsdn.org/projects/dorado7" target="_blank" rel="noopener">http://bsdn.org/projects/dorado7</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dorado7系列目录</title>
      <link href="/2018/09/01/dorado7/dorado7-xi-lie-mu-lu/"/>
      <url>/2018/09/01/dorado7/dorado7-xi-lie-mu-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><ol><li><a href="http://kangyuansheng.top/2018/05/17/Dorado7/BasicPaper/Dorado7-Basic-Basic/" target="_blank" rel="noopener">Dorado7系列之基础篇:1.Dorado7介绍以及一些常用文档</a></li><li><a href="http://kangyuansheng.top/2018/05/25/Dorado7/BasicPaper/Dorado7-Basic-DataGrid-1/" target="_blank" rel="noopener">Dorado7系列之基础篇:2.新建一个单表维护模块</a></li><li><a href>Dorado7系列之基础篇:3.单表维护模块优化</a> </li><li><a href>Dorado7系列之基础篇:4.递归树模块</a> </li><li><a href>Dorado7系列之基础篇:5.递归树与表格实现联动</a> </li></ol><h3 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a>框架篇</h3><ol><li><a href="http://kangyuansheng.top/2019/02/12/Dorado7/framework/Dorado7-%E6%A1%86%E6%9E%B6%E7%AF%87-%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">Dorado7系列之框架篇:1.如何搭建BDF3框架</a></li><li><a href="http://kangyuansheng.top/2019/02/12/Dorado7/framework/Dorado7-%E6%A1%86%E6%9E%B6%E7%AF%87-%E6%90%AD%E5%BB%BABDF3%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">Dorado7系列之框架篇:2.搭建BDF3框架</a></li><li><a href="http://kangyuansheng.top/2019/02/12/Dorado7/framework/Dorado7-%E6%A1%86%E6%9E%B6%E7%AF%87-BDF3%E9%9B%86%E6%88%90Lombok/" target="_blank" rel="noopener">Dorado7系列之框架篇:3.BDF3集成Lombok</a> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Dorado7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dorado7 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
